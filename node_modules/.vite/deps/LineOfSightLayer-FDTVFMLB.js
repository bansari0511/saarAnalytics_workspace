import {
  b as b3,
  c as c3
} from "./chunk-VCBUXM7X.js";
import "./chunk-XVW2TNW7.js";
import {
  i
} from "./chunk-WHNSSW5C.js";
import {
  l as l4
} from "./chunk-ZEFJ6HA3.js";
import "./chunk-2ZGO74NI.js";
import "./chunk-K5STXHEQ.js";
import "./chunk-MJTI6OYZ.js";
import {
  b2
} from "./chunk-FAYGOXZ3.js";
import "./chunk-SIRTOV2N.js";
import {
  S
} from "./chunk-ZQUEN26P.js";
import "./chunk-DTPLSS5W.js";
import "./chunk-HPADPQJ7.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import {
  c as c2
} from "./chunk-WMN22ENS.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import {
  a2,
  c,
  l as l3
} from "./chunk-CUMZN5BS.js";
import "./chunk-UJ25GG5E.js";
import "./chunk-MWVR4HFA.js";
import "./chunk-FOPBVVXE.js";
import {
  v
} from "./chunk-J43A4DKX.js";
import "./chunk-PRE6DX7U.js";
import "./chunk-WSMONZ65.js";
import "./chunk-ZT7UIVVR.js";
import {
  h as h2
} from "./chunk-3URWFW2B.js";
import "./chunk-INI6MHIQ.js";
import {
  n,
  t
} from "./chunk-5NFV6CXP.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-2R53FNGL.js";
import {
  a as a3
} from "./chunk-CUUDF5R2.js";
import {
  X
} from "./chunk-XYME6BO6.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import {
  V
} from "./chunk-YQ5L6J6K.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import {
  _
} from "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-FV6ZNHFI.js";
import {
  l,
  w
} from "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import {
  l as l2
} from "./chunk-JA3AQLAK.js";
import {
  b,
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-SH3CUEMB.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  o4 as o
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  h
} from "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/analysis/LineOfSightAnalysisObserver.js
var f = class extends l2.JSONSupportMixin(a3.ClonableMixin(b)) {
  constructor(o2) {
    super(o2), this.position = null, this.elevationInfo = null, this.feature = null;
  }
  equals(o2) {
    return o(this.position, o2.position) && o(this.elevationInfo, o2.elevationInfo) && c3(this.feature, o2.feature);
  }
};
r([m({ type: _, json: { write: { isRequired: true } } })], f.prototype, "position", void 0), r([m({ type: c2 }), v()], f.prototype, "elevationInfo", void 0), r([m(b3)], f.prototype, "feature", void 0), f = r([a("esri.analysis.LineOfSightAnalysisObserver")], f);
var u = f;

// node_modules/@arcgis/core/analysis/LineOfSightAnalysisTarget.js
var l5 = class extends l2.JSONSupportMixin(a3) {
  constructor(o2) {
    super(o2), this.position = null, this.elevationInfo = null, this.feature = null;
  }
  equals(o2) {
    return o(this.position, o2.position) && o(this.elevationInfo, o2.elevationInfo) && c3(this.feature, o2.feature);
  }
};
r([m({ type: _, json: { write: true, origins: { "web-scene": { write: { isRequired: true } } } } }), v()], l5.prototype, "position", void 0), r([m({ type: c2 }), v()], l5.prototype, "elevationInfo", void 0), r([m(b3)], l5.prototype, "feature", void 0), l5 = r([a("esri.analysis.LineOfSightAnalysisTarget")], l5);

// node_modules/@arcgis/core/analysis/LineOfSightAnalysis.js
var d = V.ofType(l5);
var j = class extends l4 {
  constructor(t2) {
    super(t2), this.type = "line-of-sight", this.observer = null, this.extent = null;
  }
  initialize() {
    this.addHandles(l((() => this._computeExtent()), ((t2) => {
      null == t2?.pending && this._set("extent", null != t2 ? t2.extent : null);
    }), w));
  }
  get targets() {
    return this._get("targets") || new d();
  }
  set targets(t2) {
    this._set("targets", n(t2, this.targets, d));
  }
  get spatialReference() {
    return null != this.observer?.position ? this.observer.position.spatialReference : null;
  }
  get valid() {
    return null != this.observer?.position;
  }
  async waitComputeExtent() {
    const t2 = this._computeExtent();
    return null != t2 ? t2.pending : Promise.resolve();
  }
  _computeExtent() {
    const t2 = this.spatialReference;
    if (null == this.observer?.position || null == t2) return null;
    const e = (t3) => "absolute-height" === i(t3.position, t3.elevationInfo), r2 = this.observer.position, o2 = a2(r2.x, r2.y, r2.z, r2.x, r2.y, r2.z);
    for (const i2 of this.targets) if (null != i2.position) {
      const e2 = X(i2.position, t2);
      if (null != e2.pending) return { pending: e2.pending, extent: null };
      if (null != e2.geometry) {
        const { x: t3, y: r3, z: s2 } = e2.geometry;
        l3(o2, [t3, r3, s2]);
      }
    }
    const s = c(o2, t2);
    return e(this.observer) && this.targets.every(e) || (s.zmin = void 0, s.zmax = void 0), { pending: null, extent: s };
  }
  clear() {
    this.observer = null, this.targets.removeAll();
  }
  equals(t2) {
    return this === t2 || super.equals(t2) && o(this.observer, t2.observer) && h(this.targets.toArray(), t2.targets.toArray(), ((t3, e) => t3.equals(e)));
  }
};
r([m({ type: ["line-of-sight"] })], j.prototype, "type", void 0), r([m({ type: u, json: { read: true, write: true } })], j.prototype, "observer", void 0), r([m({ cast: t, type: d, nonNullable: true, json: { read: true, write: true } })], j.prototype, "targets", null), r([m({ value: null, readOnly: true })], j.prototype, "extent", void 0), r([m()], j.prototype, "spatialReference", null), r([m({ readOnly: true })], j.prototype, "valid", null), j = r([a("esri.analysis.LineOfSightAnalysis")], j);

// node_modules/@arcgis/core/layers/LineOfSightLayer.js
var u2 = V.ofType(l5);
var d2 = class extends b2(S(h2)) {
  constructor(e) {
    super(e), this.type = "line-of-sight", this.operationalLayerType = "LineOfSightLayer", this.analysis = new j(), this.opacity = 1;
  }
  initialize() {
    this.addHandles(l((() => this.analysis), ((e, t2) => {
      null != t2 && t2.parent === this && (t2.parent = null), null != e && (e.parent = this);
    }), w));
  }
  async load() {
    return null != this.analysis && this.addResolvingPromise(this.analysis.waitComputeExtent()), this;
  }
  get observer() {
    return this.analysis?.observer;
  }
  set observer(e) {
    const { analysis: t2 } = this;
    t2 && (t2.observer = e);
  }
  get targets() {
    return null != this.analysis ? this.analysis.targets : new V();
  }
  set targets(e) {
    n(e, this.analysis?.targets);
  }
  get fullExtent() {
    return null != this.analysis ? this.analysis.extent : null;
  }
  get spatialReference() {
    return null != this.analysis ? this.analysis.spatialReference : null;
  }
  releaseAnalysis(e) {
    this.analysis === e && (this.analysis = new j());
  }
};
r([m({ json: { read: false }, readOnly: true })], d2.prototype, "type", void 0), r([m({ type: ["LineOfSightLayer"] })], d2.prototype, "operationalLayerType", void 0), r([m({ type: u, json: { read: true, write: { isRequired: true, ignoreOrigin: true } } })], d2.prototype, "observer", null), r([m({ type: u2, json: { read: true, write: { ignoreOrigin: true, isRequired: true } } })], d2.prototype, "targets", null), r([m({ type: j, nonNullable: true, json: { read: false, write: false } })], d2.prototype, "analysis", void 0), r([m({ readOnly: true })], d2.prototype, "fullExtent", null), r([m({ readOnly: true })], d2.prototype, "spatialReference", null), r([m({ readOnly: true, json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } } })], d2.prototype, "opacity", void 0), r([m({ type: ["show", "hide"] })], d2.prototype, "listMode", void 0), d2 = r([a("esri.layers.LineOfSightLayer")], d2);
var m2 = d2;
export {
  m2 as default
};
//# sourceMappingURL=LineOfSightLayer-FDTVFMLB.js.map
