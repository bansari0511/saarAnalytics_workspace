import {
  e as e2
} from "./chunk-K6CAHOYR.js";
import {
  d
} from "./chunk-6PSWWIGY.js";
import "./chunk-X54A5S3J.js";
import "./chunk-IQFA7YIN.js";
import {
  c
} from "./chunk-AZW6GDWJ.js";
import "./chunk-MFXX2MV4.js";
import "./chunk-O6RGVUWL.js";
import {
  a as a4
} from "./chunk-G2YKZHYQ.js";
import {
  s as s2
} from "./chunk-FGPKHX4G.js";
import {
  a as a5
} from "./chunk-2FIN3MB5.js";
import "./chunk-GBOUNRWE.js";
import {
  p as p3
} from "./chunk-NL2NZDM4.js";
import "./chunk-JSADYHZ3.js";
import {
  A,
  l
} from "./chunk-7SLD6UJQ.js";
import {
  e
} from "./chunk-FBQHQDLT.js";
import {
  c as c2
} from "./chunk-CCSAZNG5.js";
import "./chunk-7QI7J4JB.js";
import {
  p as p4
} from "./chunk-TDFQY4TL.js";
import {
  f as f2
} from "./chunk-BPVOXAWI.js";
import {
  p as p2
} from "./chunk-K54LZFQX.js";
import "./chunk-URBRKEAB.js";
import "./chunk-FT4FDH6N.js";
import {
  t
} from "./chunk-XGN6BPAP.js";
import {
  I as I3,
  b2 as b,
  d as d2,
  l as l2,
  m as m4,
  p as p6,
  s as s3,
  u as u2,
  w,
  y as y3
} from "./chunk-FAYGOXZ3.js";
import "./chunk-SIRTOV2N.js";
import {
  m as m3,
  u
} from "./chunk-7VD3IPFA.js";
import "./chunk-KFLBCUTX.js";
import {
  j
} from "./chunk-TYGU3EXP.js";
import {
  S
} from "./chunk-ZQUEN26P.js";
import "./chunk-PNZTL5C4.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-TNGT5LD3.js";
import {
  ae
} from "./chunk-QVVUEHRT.js";
import "./chunk-5H6DUUYZ.js";
import "./chunk-NBK7CQDR.js";
import "./chunk-4COYKAT6.js";
import "./chunk-4PMAEDAD.js";
import "./chunk-SM6D23CI.js";
import "./chunk-CKXK33BB.js";
import "./chunk-7BL5FEWJ.js";
import "./chunk-OAEHASLX.js";
import {
  g
} from "./chunk-PX666UG6.js";
import "./chunk-7QAQW3R4.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-KCEUIRTN.js";
import "./chunk-CIYAWLSD.js";
import "./chunk-GDJLDPJ6.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-ZWFRZAOO.js";
import "./chunk-ZLQRJCGG.js";
import "./chunk-WMN22ENS.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2EOHKZLO.js";
import {
  y
} from "./chunk-CYQZCOHI.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-OUR2XGMQ.js";
import "./chunk-T7S34Q47.js";
import "./chunk-AZ6KC3UF.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-GQBGK7RW.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import {
  p as p5
} from "./chunk-LJ33ZUQ3.js";
import "./chunk-4IWWMMA3.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-7H3DALFB.js";
import {
  q
} from "./chunk-TULIAEWT.js";
import "./chunk-N75Y7HEU.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-WWAX5Q53.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import {
  R
} from "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import {
  m as m2
} from "./chunk-63MMKYGO.js";
import {
  y as y2
} from "./chunk-2OFZKHVN.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-3CFYBBSV.js";
import {
  I as I2,
  g as g2
} from "./chunk-UJ25GG5E.js";
import "./chunk-MWVR4HFA.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-AACFCXAP.js";
import "./chunk-ZT7UIVVR.js";
import {
  h
} from "./chunk-3URWFW2B.js";
import "./chunk-YTTBQ62G.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-5NFV6CXP.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-KA2INOMU.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-XYME6BO6.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-YQ5L6J6K.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-RKF6WUZT.js";
import {
  P
} from "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-5CXTLD23.js";
import "./chunk-KZ2CHKU3.js";
import {
  p
} from "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import {
  z
} from "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import {
  f
} from "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-G3UCNZQL.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-SRNKPAJX.js";
import {
  a as a3
} from "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-SH3CUEMB.js";
import {
  I
} from "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  a,
  k
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import {
  has
} from "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/layers/graphics/sources/GeoJSONSource.js
var p7 = class extends p {
  constructor() {
    super(...arguments), this.type = "geojson", this.refresh = k((async (e3) => {
      await this.load();
      const { extent: t2, timeExtent: r2 } = await this._connection.invoke("refresh", e3);
      return this.sourceJSON.extent = t2, r2 && (this.sourceJSON.timeInfo.timeExtent = [r2.start, r2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    }));
  }
  load(e3) {
    const t2 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this._startWorker(t2)), Promise.resolve(this);
  }
  destroy() {
    this._connection?.close(), this._connection = null;
  }
  applyEdits(e3) {
    return this.load().then((() => this._applyEdits(e3)));
  }
  openPorts() {
    return this.load().then((() => this._connection.openPorts()));
  }
  queryFeatures(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("queryFeatures", e3 ? e3.toJSON() : null, t2))).then(((e4) => g.fromJSON(e4)));
  }
  queryFeaturesJSON(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("queryFeatures", e3 ? e3.toJSON() : null, t2)));
  }
  queryFeatureCount(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("queryFeatureCount", e3 ? e3.toJSON() : null, t2)));
  }
  queryObjectIds(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("queryObjectIds", e3 ? e3.toJSON() : null, t2)));
  }
  queryExtent(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("queryExtent", e3 ? e3.toJSON() : null, t2))).then(((e4) => ({ count: e4.count, extent: z.fromJSON(e4.extent) })));
  }
  querySnapping(e3, t2 = {}) {
    return this.load(t2).then((() => this._connection.invoke("querySnapping", e3, t2)));
  }
  async queryAttributeBins(e3, t2 = {}) {
    return await this.load(), this._connection.invoke("queryAttributeBins", e3?.toJSON(), t2);
  }
  _applyEdits(e3) {
    if (!this._connection) throw new s("geojson-layer-source:edit-failure", "Memory source not loaded");
    const r2 = this.layer.objectIdField, o = [], s4 = [], i2 = [];
    if (e3.addFeatures) for (const t2 of e3.addFeatures) o.push(this._serializeFeature(t2));
    if (e3.deleteFeatures) for (const t2 of e3.deleteFeatures) "objectId" in t2 && null != t2.objectId ? s4.push(t2.objectId) : "attributes" in t2 && null != t2.attributes[r2] && s4.push(t2.attributes[r2]);
    if (e3.updateFeatures) for (const t2 of e3.updateFeatures) i2.push(this._serializeFeature(t2));
    return this._connection.invoke("applyEdits", { adds: o, updates: i2, deletes: s4 }).then((({ extent: e4, timeExtent: t2, featureEditResults: r3 }) => (this.sourceJSON.extent = e4, t2 && (this.sourceJSON.timeInfo.timeExtent = [t2.start, t2.end]), this._createEditsResult(r3))));
  }
  _createEditsResult(e3) {
    return { addFeatureResults: e3.addResults ? e3.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e3.updateResults ? e3.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e3.deleteResults ? e3.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e3) {
    const r2 = true === e3.success ? null : e3.error || { code: void 0, description: "" };
    return { objectId: e3.objectId, globalId: e3.globalId, error: r2 ? new s("geojson-layer-source:edit-failure", r2.description, { code: r2.code }) : null };
  }
  _serializeFeature(e3) {
    const { attributes: t2 } = e3, r2 = this._geometryForSerialization(e3);
    return r2 ? { geometry: r2.toJSON(), attributes: t2 } : { attributes: t2 };
  }
  _geometryForSerialization(e3) {
    const { geometry: t2 } = e3;
    return null == t2 ? null : "mesh" === t2.type || "extent" === t2.type ? P.fromExtent(t2.extent) : t2;
  }
  async _startWorker(e3) {
    this._connection = await p5("GeoJSONSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e3, registryTarget: this });
    const { fields: t2, spatialReference: r2, hasZ: s4, geometryType: n, objectIdField: a6, url: u3, timeInfo: l3, customParameters: h2 } = this.layer, p8 = "defaults" === this.layer.originOf("spatialReference"), m5 = { url: u3, customParameters: h2, fields: t2 && t2.map(((e4) => e4.toJSON())), geometryType: y2.toJSON(n), hasZ: s4, objectIdField: a6, timeInfo: l3 ? l3.toJSON() : null, spatialReference: p8 ? null : r2 && r2.toJSON() }, y4 = await this._connection.invoke("load", m5, { signal: e3 });
    for (const i2 of y4.warnings) i.getLogger(this.layer).warn("#load()", `${i2.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: i2 });
    y4.featureErrors.length && i.getLogger(this.layer).warn("#load()", `Encountered ${y4.featureErrors.length} validation errors while loading features. (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { errors: y4.featureErrors }), this.sourceJSON = y4.layerDefinition, this.capabilities = y(this.sourceJSON.hasZ, true);
  }
};
r([m()], p7.prototype, "capabilities", void 0), r([m()], p7.prototype, "type", void 0), r([m({ constructOnly: true })], p7.prototype, "layer", void 0), r([m()], p7.prototype, "sourceJSON", void 0), p7 = r([a2("esri.layers.graphics.sources.GeoJSONSource")], p7);

// node_modules/@arcgis/core/layers/GeoJSONLayer.js
var k2 = s2();
var z2 = class extends p3(a4(e(d(c(p2(c2(e2(t(f2(b(j(S(h))))))))))))) {
  constructor(e3) {
    super(e3), this.attributeTableTemplate = null, this.copyright = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.editingEnabled = false, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "GeoJSON", this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new p7({ layer: this }), this.spatialReference = f.WGS84, this.templates = null, this.title = "GeoJSON", this.type = "geojson";
  }
  destroy() {
    this.source?.destroy();
  }
  load(e3) {
    const t2 = this.loadFromPortal({ supportedTypes: ["GeoJson"], supportsData: false }, e3).catch(a).then((() => this.source.load(e3))).then((() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo"], "service"), g2(this.renderer, this.fieldsIndex), I2(this.timeInfo, this.fieldsIndex);
    }));
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  get capabilities() {
    return this.source ? this.source.capabilities : null;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  get parsedUrl() {
    return this.url ? I(this.url) : null;
  }
  set renderer(e3) {
    g2(e3, this.fieldsIndex), this._set("renderer", e3);
  }
  set url(e3) {
    if (!e3) return void this._set("url", e3);
    const t2 = I(e3);
    this._set("url", t2.path), t2.query && (this.customParameters = { ...this.customParameters, ...t2.query });
  }
  async applyEdits(e3, t2) {
    const { applyEdits: r2 } = await import("./editingSupport-YIMKG6B4.js");
    await this.load();
    const i2 = await r2(this, this.source, e3, t2);
    return this.read({ extent: this.source.sourceJSON.extent, timeInfo: this.source.sourceJSON.timeInfo }, { origin: "service", ignoreDefaults: true }), i2;
  }
  on(e3, t2) {
    return super.on(e3, t2);
  }
  createPopupTemplate(e3) {
    return p4(this, e3);
  }
  createQuery() {
    const e3 = new R(), t2 = this.capabilities?.data;
    e3.returnGeometry = true, t2 && t2.supportsZ && (e3.returnZ = true), e3.outFields = ["*"], e3.where = this.definitionExpression || "1=1";
    const { timeOffset: r2, timeExtent: i2 } = this;
    return e3.timeExtent = null != r2 && null != i2 ? i2.offset(-r2.value, r2.unit) : i2 || null, e3;
  }
  getFieldDomain(e3, t2) {
    return this.getField(e3)?.domain;
  }
  getField(e3) {
    return this.fieldsIndex.get(e3);
  }
  queryFeatures(e3, t2) {
    return this.load().then((() => this.source.queryFeatures(R.from(e3) || this.createQuery(), t2))).then(((e4) => {
      if (e4?.features) for (const t3 of e4.features) t3.layer = t3.sourceLayer = this;
      return e4;
    }));
  }
  queryObjectIds(e3, t2) {
    return this.load().then((() => this.source.queryObjectIds(R.from(e3) || this.createQuery(), t2)));
  }
  queryFeatureCount(e3, t2) {
    return this.load().then((() => this.source.queryFeatureCount(R.from(e3) || this.createQuery(), t2)));
  }
  queryExtent(e3, t2) {
    return this.load().then((() => this.source.queryExtent(R.from(e3) || this.createQuery(), t2)));
  }
  async queryAttributeBins(e3, t2) {
    const { source: r2, capabilities: i2 } = await this.load();
    ae(e3, i2, "GeoJSONLayer");
    const o = await import("./AttributeBinsQuery-RWKRG6VQ.js"), s4 = await r2.queryAttributeBins(o.default.from(e3), t2);
    if (s4.features) for (const p8 of s4.features) p8.layer = p8.sourceLayer = this;
    return s4;
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e3, updates: t2 } = await this.source.refresh(this.customParameters);
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e3;
    } catch {
    }
    return false;
  }
};
r([m(I3)], z2.prototype, "attributeTableTemplate", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], z2.prototype, "capabilities", null), r([m({ type: String })], z2.prototype, "copyright", void 0), r([m({ readOnly: true })], z2.prototype, "createQueryVersion", null), r([m(a3("dateFieldsTimeReference"))], z2.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], z2.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], z2.prototype, "definitionExpression", void 0), r([m({ type: String })], z2.prototype, "displayField", void 0), r([m({ type: Boolean })], z2.prototype, "editingEnabled", void 0), r([m(m4)], z2.prototype, "elevationInfo", void 0), r([m({ type: [m2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], z2.prototype, "fields", void 0), r([m(k2.fieldsIndex)], z2.prototype, "fieldsIndex", void 0), r([m({ type: z, json: { name: "extent" } })], z2.prototype, "fullExtent", void 0), r([m({ type: ["point", "polygon", "polyline", "multipoint"], json: { read: { reader: y2.read } } })], z2.prototype, "geometryType", void 0), r([m({ type: Boolean })], z2.prototype, "hasZ", void 0), r([m(u2)], z2.prototype, "id", void 0), r([m({ type: Boolean, readOnly: true })], z2.prototype, "isTable", null), r([m(p6)], z2.prototype, "labelsVisible", void 0), r([m({ type: [A], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l }, write: true } })], z2.prototype, "labelingInfo", void 0), r([m(d2)], z2.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], z2.prototype, "listMode", void 0), r([m({ type: String, json: { name: "layerDefinition.objectIdField", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "objectIdField" } } } })], z2.prototype, "objectIdField", void 0), r([m(w)], z2.prototype, "opacity", void 0), r([m({ type: ["GeoJSON"] })], z2.prototype, "operationalLayerType", void 0), r([m(k2.outFields)], z2.prototype, "outFields", void 0), r([m({ readOnly: true })], z2.prototype, "parsedUrl", null), r([m(l2)], z2.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], z2.prototype, "popupTemplate", void 0), r([m({ types: m3, json: { name: "layerDefinition.drawingInfo.renderer", write: true, origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u } } } })], z2.prototype, "renderer", null), r([m(s3)], z2.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], z2.prototype, "source", void 0), r([m({ type: f })], z2.prototype, "spatialReference", void 0), r([m({ type: [a5] })], z2.prototype, "templates", void 0), r([m()], z2.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], z2.prototype, "type", void 0), r([m(y3)], z2.prototype, "url", null), z2 = r([a2("esri.layers.GeoJSONLayer")], z2);
var W = z2;
export {
  W as default
};
//# sourceMappingURL=GeoJSONLayer-NCH7LZBK.js.map
