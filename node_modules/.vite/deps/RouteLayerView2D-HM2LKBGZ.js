import {
  t
} from "./chunk-FVJ7CFIJ.js";
import "./chunk-NCD2Z76P.js";
import {
  O
} from "./chunk-QPWPHBKW.js";
import "./chunk-7GLQRUVF.js";
import "./chunk-IE6AQNQH.js";
import "./chunk-UMZKDG42.js";
import "./chunk-U3M2HTCF.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-XNWGMKSJ.js";
import {
  S as S3
} from "./chunk-CKMNEXI4.js";
import {
  u
} from "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import {
  c,
  c2,
  f
} from "./chunk-XRCJN5ZV.js";
import {
  S,
  S2,
  d,
  h as h2
} from "./chunk-W3D3X2RU.js";
import "./chunk-Y6UIOJ4V.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-ENKERMEC.js";
import "./chunk-T3IP3HXQ.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-QGU2IM7A.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-XCRRWPA6.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-MFFIM4CO.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-4TCLGGOP.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-TB5L7XWS.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-WQVSDGVK.js";
import "./chunk-WC2H7YQR.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-O4T62PMJ.js";
import "./chunk-SMPICNST.js";
import "./chunk-O4VTUNJU.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-GQBGK7RW.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YXTIORDS.js";
import "./chunk-RHBNP5DU.js";
import "./chunk-U3VDSMNO.js";
import "./chunk-JUUCGRXT.js";
import "./chunk-746KDGCX.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-Q7V2BPNQ.js";
import "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import "./chunk-DCQ3YZVB.js";
import "./chunk-QTS3VC6A.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-POHAWIBC.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import {
  l as l2
} from "./chunk-Y23TTNG6.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import {
  V
} from "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-P4O4YCLI.js";
import {
  h,
  l,
  w
} from "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  e
} from "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import {
  L
} from "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var I = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t2) {
  return t2 instanceof c || t2 instanceof c2 || t2 instanceof S || t2 instanceof h2 || t2 instanceof d || t2 instanceof f || t2 instanceof S2;
}
function F(t2) {
  return V.isCollection(t2) && t2.length && M(t2.at(0));
}
function j(t2) {
  return Array.isArray(t2) && t2.length > 0 && M(t2[0]);
}
var V2 = /* @__PURE__ */ new Set(["default"]);
var G = class extends S3(u) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map(), this._interaction = null, this._loadInteractionPromise = null, this.interactive = false;
  }
  get _routeItems() {
    return new l2({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.addHandles(l((() => {
      const { interactive: t2, suspended: e2 } = this;
      return { interactive: t2, suspended: e2 };
    }), (({ interactive: t2, suspended: e2 }) => {
      const i = t2 && !e2;
      i && this._getInteractionLoadPromise().then(((t3) => {
        t3.enabled = this.interactive && !this.suspended;
      })), this._interaction && (this._interaction.enabled = i);
    }), w)), this._updatingHandles.addOnCollectionChange((() => this._routeItems), ((t2) => this._routeItemsChanged(t2)), h);
  }
  destroy() {
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), this._get("_routeItems")?.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView(), this._interaction?.enabled && (this._interaction.enabled = false);
  }
  get selectedNetworkFeatures() {
    return this._interaction?.selectedNetworkFeatures ?? null;
  }
  async create(t2) {
    if (!this.interactive) return;
    return (await this._getInteractionLoadPromise()).create(t2);
  }
  async fetchPopupFeaturesAtLocation(t2, e2) {
    return this._graphicsView.hitTest(t2).filter((({ popupTemplate: t3 }) => !!t3));
  }
  highlight(t2) {
    let i;
    i = M(t2) ? [this._getNetworkFeatureUid(t2)] : j(t2) ? t2.map(((t3) => this._getNetworkFeatureUid(t3))) : F(t2) ? t2.map(((t3) => this._getNetworkFeatureUid(t3))).toArray() : [t2.uid];
    const r2 = i.filter(L);
    return r2.length ? (this._addHighlight(r2), e((() => this._removeHighlight(r2)))) : e();
  }
  async hitTest(t2, i) {
    if (this.suspended) return null;
    const r2 = this._graphicsView.hitTest(t2).filter(L).map(((t3) => this._networkGraphicMap.get(t3)));
    if (!r2.length) return null;
    const { layer: s } = this;
    return r2.reverse().map(((e2) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e2 })));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveEnd() {
  }
  remove(t2) {
    this._interaction?.remove(t2);
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, t3 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), i = new t(t2.featuresTilingScheme);
    this._graphicsView = new O({ container: i, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(i), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return k.indexOf(e2.type);
  }
  _getInteractionLoadPromise() {
    return this._loadInteractionPromise || (this._loadInteractionPromise = this._loadInteraction(), this._updatingHandles.addPromise(this._loadInteractionPromise)), this._loadInteractionPromise;
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  async _loadInteraction() {
    const { layer: t2, view: e2 } = this, { RouteLayerInteraction: i } = await import("./RouteLayerInteraction-VA4AVVIO.js");
    return this._interaction = new i({ view: e2, layer: t2 }), this._interaction;
  }
  _removeHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2) - 1;
      0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
    }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map(((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      })));
      for (const e2 of t2.removed) this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map(((t3) => {
        const e2 = this._createGraphic(t3);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      })).filter(L));
      for (const e2 of t2.added) this.addHandles([l((() => e2.geometry), ((t3, i) => {
        this._updateGraphic(e2, "geometry", t3, i);
      })), l((() => e2.symbol), ((t3, i) => {
        this._updateGraphic(e2, "symbol", t3, i);
      })), l((() => e2.popupTemplate), ((t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).popupTemplate = t3);
      })), l((() => e2.toGraphic().attributes), ((t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).attributes = t3);
      }))], e2);
      this._graphics.sort(((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2)));
    }
  }
  _updateGraphic(t2, e2, i, r2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = i, I.graphic = s, I.property = e2, I.oldValue = r2, I.newValue = i, this._graphicsView.graphicUpdateHandler(I);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(V2.values());
    this._graphicsView.setHighlight(t2.map(((t3) => ({ objectId: t3, highlightFlags: e2 }))));
  }
};
r([m()], G.prototype, "_graphics", void 0), r([m()], G.prototype, "_routeItems", null), r([m()], G.prototype, "_interaction", void 0), r([m()], G.prototype, "interactive", void 0), r([m({ readOnly: true })], G.prototype, "selectedNetworkFeatures", null), G = r([a("esri.views.2d.layers.RouteLayerView2D")], G);
var b = G;
export {
  b as default
};
//# sourceMappingURL=RouteLayerView2D-HM2LKBGZ.js.map
