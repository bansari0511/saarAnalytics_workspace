import {
  y
} from "./chunk-5LJIXJFN.js";
import "./chunk-GYPE5A7A.js";
import {
  ae,
  f as f2,
  m as m2
} from "./chunk-SYJXR3B7.js";
import {
  e as e3
} from "./chunk-M2X3ONOZ.js";
import {
  t as t3
} from "./chunk-LP5PTXVN.js";
import "./chunk-M4N5VBTX.js";
import "./chunk-2JMKQEOG.js";
import "./chunk-ZOY6YWKS.js";
import "./chunk-X6C26JJQ.js";
import {
  A
} from "./chunk-BZSAIP56.js";
import "./chunk-R7CNDNGI.js";
import "./chunk-ZYHGL6UN.js";
import "./chunk-ZBM5QEVD.js";
import "./chunk-DBTEUCHQ.js";
import {
  i
} from "./chunk-MI2SWXYL.js";
import {
  t as t4
} from "./chunk-JL5A76NE.js";
import {
  l
} from "./chunk-KM3CYDM4.js";
import "./chunk-2FIN3MB5.js";
import {
  i as i2
} from "./chunk-GBOUNRWE.js";
import "./chunk-NL2NZDM4.js";
import "./chunk-JSADYHZ3.js";
import "./chunk-5MUPVMW7.js";
import {
  e as e2
} from "./chunk-FBQHQDLT.js";
import {
  c as c2
} from "./chunk-AQ3SO7BS.js";
import "./chunk-7QI7J4JB.js";
import "./chunk-IDANBZGI.js";
import {
  f
} from "./chunk-25POTLDF.js";
import {
  p
} from "./chunk-K54LZFQX.js";
import "./chunk-URBRKEAB.js";
import "./chunk-FT4FDH6N.js";
import {
  t as t2
} from "./chunk-XGN6BPAP.js";
import {
  b2,
  y as y2
} from "./chunk-CUM7BKUH.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-7PK7NSON.js";
import "./chunk-NB35NLJL.js";
import "./chunk-G2PEGJ7A.js";
import "./chunk-5H6DUUYZ.js";
import "./chunk-Y2LRIJL4.js";
import "./chunk-2B7VWJ3M.js";
import "./chunk-N22DWT46.js";
import "./chunk-7BL5FEWJ.js";
import "./chunk-OAEHASLX.js";
import "./chunk-SM6D23CI.js";
import {
  j
} from "./chunk-26WMKG2R.js";
import {
  S
} from "./chunk-ZQUEN26P.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-2FZPSLPN.js";
import "./chunk-MFFIM4CO.js";
import "./chunk-GOVYB53C.js";
import "./chunk-ZLQRJCGG.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-TB5L7XWS.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-VJN4WONG.js";
import "./chunk-ERF6G26E.js";
import "./chunk-IB7M24YC.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-6MQQZWN5.js";
import {
  c as c3
} from "./chunk-7XQTZPAU.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-2STJSZ2H.js";
import "./chunk-K5CV62SX.js";
import "./chunk-P7KAQGGQ.js";
import "./chunk-J6CZRLYU.js";
import "./chunk-4QXO2FM6.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-T7S34Q47.js";
import "./chunk-O4VTUNJU.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import "./chunk-GQBGK7RW.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import "./chunk-DCQ3YZVB.js";
import "./chunk-QTS3VC6A.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-POHAWIBC.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import {
  t
} from "./chunk-WSBT6M77.js";
import "./chunk-Y23TTNG6.js";
import {
  h
} from "./chunk-JUN27FQK.js";
import "./chunk-GIMN3QZ5.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import {
  u
} from "./chunk-2R53FNGL.js";
import "./chunk-KA2INOMU.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-GUADICE2.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import {
  z
} from "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import {
  o
} from "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import {
  r as r2
} from "./chunk-H6YQECN2.js";
import {
  c
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import {
  a as a3
} from "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  e,
  m2 as m,
  n2 as n
} from "./chunk-GWXO4XME.js";
import {
  a2
} from "./chunk-S62CSPIH.js";
import {
  x
} from "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  H
} from "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  a,
  b,
  k
} from "./chunk-N626Y23H.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var k2 = class extends p(c2(t2(m2(f2(l(b2(j(S(f(i(e2(h)))))))))))) {
  constructor(...e4) {
    super(...e4), this._exportImageParameters = new y({ layer: this }), this.dateFieldsTimeZone = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.elevationInfo = new c3({ mode: "on-the-ground" }), this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeZone = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null, this._debouncedSaveOperations = k((async (e5, r3, t5) => {
      const { save: s2, saveAs: i3 } = await import("./mapImageLayerUtils-NLV5S4Y4.js");
      switch (e5) {
        case A.SAVE:
          return s2(this, r3);
        case A.SAVE_AS:
          return i3(this, t5, r3);
      }
    }));
  }
  normalizeCtorArgs(e4, r3) {
    return "string" == typeof e4 ? { url: e4, ...r3 } : e4;
  }
  load(e4) {
    const r3 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e4).catch(a).then((() => this._fetchService(r3)))), Promise.resolve(this);
  }
  destroy() {
    this._exportImageParameters.destroy();
  }
  readImageFormat(e4, r3) {
    const t5 = r3.supportedImageFormatTypes;
    return t5 && t5.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e4, r3, t5, s2) {
    if (!this.loaded || !e4) return;
    const i3 = e4.slice().reverse().flatten((({ sublayers: e5 }) => e5 && e5.toArray().reverse())).toArray();
    let o2 = false;
    const a4 = n(s2.origin);
    let n2;
    if (this.capabilities?.operations.supportsExportMap && this.capabilities?.exportMap?.supportsDynamicLayers) {
      if (a4 === e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("service").sublayers;
        o2 = e3(i3, e5, e.SERVICE);
      } else if (a4 > e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("portal-item");
        o2 = e3(i3, e5.sublayers, n(e5.origin)), n2 = e5.originWithPartialOverrides;
      }
    }
    const p2 = [], m3 = { writeSublayerStructure: o2, ...s2, minimumWritableOrigin: n2 };
    let l2 = o2 || this.hasVisibleLayersForOrigin(a4);
    i3.forEach(((e5) => {
      const r4 = e5.write({}, m3);
      p2.push(r4), l2 = l2 || "user" === e5.originOf("visible");
    }));
    p2.some(((e5) => Object.keys(e5).length > 1)) && (r3.layers = p2), l2 && (r3.visibleLayers = i3.filter(((e5) => e5.visible)).map(((e5) => e5.id)));
  }
  createExportImageParameters(e4, r3, t5, s2) {
    const i3 = s2?.pixelRatio || 1;
    e4 && this.version >= 10 && (e4 = e4.clone().shiftCentralMeridian()), this._exportImageParameters.floors = s2?.floors ?? null, this._exportImageParameters.scale = i2({ extent: e4, width: r3 }) * i3;
    const o2 = this._exportImageParameters.toJSON(), a4 = !s2?.rotation || this.version < 10.3 ? {} : { rotation: -s2.rotation }, n2 = e4?.spatialReference, p2 = c(n2);
    o2.dpi *= i3;
    const m3 = {};
    if (s2?.timeExtent) {
      const { start: e5, end: r4 } = s2.timeExtent.toJSON();
      m3.time = e5 && r4 && e5 === r4 ? "" + e5 : `${e5 ?? "null"},${r4 ?? "null"}`;
    } else this.timeInfo && !this.timeInfo.hasLiveData && (m3.time = "null,null");
    return { bbox: e4 ? e4.xmin + "," + e4.ymin + "," + e4.xmax + "," + e4.ymax : void 0, bboxSR: p2, imageSR: p2, size: r3 + "," + t5, ...o2, ...a4, ...m3 };
  }
  async fetchImage(e4, r3, t5, s2) {
    const { data: i3 } = await this._fetchImage("image", e4, r3, t5, s2);
    return i3;
  }
  async fetchImageBitmap(e4, r3, t5, s2) {
    const { data: i3, url: o2 } = await this._fetchImage("blob", e4, r3, t5, s2);
    return t3(i3, o2, s2?.signal);
  }
  async fetchRecomputedExtents(e4 = {}) {
    const t5 = { ...e4, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: s2 } = await H(this.url, t5), { extent: i3, fullExtent: o2, timeExtent: a4 } = s2, n2 = i3 || o2;
    return { fullExtent: n2 && z.fromJSON(n2), timeExtent: a4 && u.fromJSON({ start: a4[0], end: a4[1] }) };
  }
  loadAll() {
    return t(this, ((e4) => {
      e4(this.allSublayers), e4(this.subtables);
    }));
  }
  async save(e4) {
    return this._debouncedSaveOperations(A.SAVE, e4);
  }
  async saveAs(e4, r3) {
    return this._debouncedSaveOperations(A.SAVE_AS, r3, e4);
  }
  serviceSupportsSpatialReference(e4) {
    return t4(this, e4);
  }
  async _fetchImage(e4, s2, i3, o2, a4) {
    const p2 = { responseType: e4, signal: a4?.signal ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(s2, i3, o2, a4), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, m3 = this.parsedUrl.path + "/export";
    if (null != p2.query?.dynamicLayers && !this.capabilities?.exportMap?.supportsDynamicLayers) throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: p2.query });
    try {
      const { data: e5 } = await H(m3, p2);
      return { data: e5, url: m3 };
    } catch (l2) {
      if (b(l2)) throw l2;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${m3}`, { error: l2 });
    }
  }
  async _fetchService(e4) {
    if (this.sourceJSON) return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t5, ssl: s2 } = await H(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e4 });
    s2 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t5, this.read(t5, { origin: "service", url: this.parsedUrl });
  }
  hasVisibleLayersForOrigin(e4) {
    return !(null == e4 || !this.sublayersSourceJSON[e4]?.visibleLayers);
  }
};
r([m(a3("dateFieldsTimeReference"))], k2.prototype, "dateFieldsTimeZone", void 0), r([m({ type: Boolean })], k2.prototype, "datesInUnknownTimezone", void 0), r([m()], k2.prototype, "dpi", void 0), r([m()], k2.prototype, "elevationInfo", void 0), r([m()], k2.prototype, "gdbVersion", void 0), r([m()], k2.prototype, "imageFormat", void 0), r([o("imageFormat", ["supportedImageFormatTypes"])], k2.prototype, "readImageFormat", null), r([m({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], k2.prototype, "imageMaxHeight", void 0), r([m({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], k2.prototype, "imageMaxWidth", void 0), r([m()], k2.prototype, "imageTransparency", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], k2.prototype, "isReference", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "labelsVisible", void 0), r([m({ type: ["ArcGISMapServiceLayer"] })], k2.prototype, "operationalLayerType", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "popupEnabled", void 0), r([m(a3("preferredTimeReference"))], k2.prototype, "preferredTimeZone", void 0), r([m()], k2.prototype, "sourceJSON", void 0), r([m({ json: { write: { ignoreOrigin: true } } })], k2.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [ae] }, visibleLayers: { type: [x] } })], k2.prototype, "writeSublayers", null), r([m({ type: ["show", "hide", "hide-children"], json: { origins: { "portal-item": { read: false, write: false } } } })], k2.prototype, "listMode", void 0), r([m({ json: { read: false }, readOnly: true, value: "map-image" })], k2.prototype, "type", void 0), r([m(y2)], k2.prototype, "url", void 0), k2 = r([a2("esri.layers.MapImageLayer")], k2);
var G = k2;
export {
  G as default
};
//# sourceMappingURL=MapImageLayer-57QOX2G3.js.map
