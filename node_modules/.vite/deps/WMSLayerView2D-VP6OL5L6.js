import {
  M
} from "./chunk-TXEC7545.js";
import {
  r as r2
} from "./chunk-BWQDNWHD.js";
import "./chunk-IBAZJUR7.js";
import "./chunk-WZCCHOOA.js";
import {
  i as i3
} from "./chunk-TAGXDKGG.js";
import {
  i as i2
} from "./chunk-I2KB67T7.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-4UKAS4AA.js";
import {
  S
} from "./chunk-FTRRGWPV.js";
import {
  u as u2
} from "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import {
  a as a2
} from "./chunk-7PWGLO3A.js";
import "./chunk-4EF2YJSI.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-RYUENKYI.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-K55CXVYD.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-RHBNP5DU.js";
import "./chunk-T7LFML3O.js";
import "./chunk-JUUCGRXT.js";
import "./chunk-746KDGCX.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-PN5QNGVV.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-Q7V2BPNQ.js";
import "./chunk-7JIYF4YZ.js";
import "./chunk-MX6AIKIJ.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-7OH24VUH.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-5NFV6CXP.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-YQ5L6J6K.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-ZJQPHR3K.js";
import {
  z
} from "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import {
  l
} from "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-SH3CUEMB.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  b,
  s as s2,
  u2 as u
} from "./chunk-N626Y23H.js";
import {
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var m2 = (m3) => {
  let n = class extends m3 {
    initialize() {
      this.exportImageParameters = new a2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = u(this.exportImageParameters);
    }
    get exportImageVersion() {
      return this.exportImageParameters?.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    get timeExtent() {
      return i3(this.layer, this.view?.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e, r3) {
      const { layer: s3 } = this;
      if (!e) throw new s("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a3 } = s3;
      if (!a3) throw new s("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: a3 });
      const p = this.createFetchPopupFeaturesQuery(e);
      if (!p) return [];
      const { extent: i4, width: m4, height: n2, x: c, y: u3 } = p;
      if (!(i4 && m4 && n2)) throw new s("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: i4, width: m4, height: n2 });
      const h = await s3.fetchFeatureInfo(i4, m4, n2, c, u3);
      return s2(r3), h;
    }
  };
  return r([m()], n.prototype, "exportImageParameters", void 0), r([m({ readOnly: true })], n.prototype, "exportImageVersion", null), r([m()], n.prototype, "layer", void 0), r([m({ readOnly: true })], n.prototype, "timeExtent", null), n = r([a("esri.views.layers.WMSLayerView")], n), n;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var g = class extends m2(i2(S(u2))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new r2();
  }
  supportsSpatialReference(e) {
    return this.layer.serviceSupportsSpatialReference(e);
  }
  update(e) {
    this.strategy.update(e).catch(((e2) => {
      b(e2) || i.getLogger(this).error(e2);
    }));
  }
  attach() {
    const { layer: e } = this, { imageMaxHeight: t, imageMaxWidth: r3 } = e;
    this.bitmapContainer = new r2(), this.container.addChild(this.bitmapContainer), this.strategy = new M({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r3, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(l((() => this.exportImageVersion), (() => this.requestUpdate())));
  }
  detach() {
    this.strategy = u(this.strategy), this.container.removeAllChildren();
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e) {
    const { view: t, bitmapContainer: r3 } = this, { x: i4, y: s3 } = e, { spatialReference: a3 } = t;
    let o, p = 0, m3 = 0;
    if (r3.children.some(((e2) => {
      const { width: t2, height: r4, resolution: h2, x: c2, y: d2 } = e2, u3 = c2 + h2 * t2, g2 = d2 - h2 * r4;
      return i4 >= c2 && i4 <= u3 && s3 <= d2 && s3 >= g2 && (o = new z({ xmin: c2, ymin: g2, xmax: u3, ymax: d2, spatialReference: a3 }), p = t2, m3 = r4, true);
    })), !o) return null;
    const h = o.width / p, c = Math.round((i4 - o.xmin) / h), d = Math.round((o.ymax - s3) / h);
    return { extent: o, width: p, height: m3, x: c, y: d };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e, t, r3, i4) {
    return this.layer.fetchImageBitmap(e, t, r3, { timeExtent: this.timeExtent, ...i4 });
  }
};
r([m()], g.prototype, "strategy", void 0), r([m()], g.prototype, "updating", void 0), g = r([a("esri.views.2d.layers.WMSLayerView2D")], g);
var y = g;
export {
  y as default
};
//# sourceMappingURL=WMSLayerView2D-VP6OL5L6.js.map
