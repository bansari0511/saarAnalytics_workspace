import {
  n,
  p
} from "./chunk-HIVRR4XI.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-POHAWIBC.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import {
  C
} from "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import "./chunk-GWXO4XME.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import {
  s,
  s2
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/portal/support/geometryServiceUtils.js
async function n2(t = null, i) {
  if (s.geometryServiceUrl) return s.geometryServiceUrl;
  if (!t) throw new s2("internal:geometry-service-url-not-configured", "No geometryServiceUrl in configuration");
  let n3;
  n3 = "portal" in t ? t.portal || C.getDefault() : t, await n3.load({ signal: i });
  const a2 = n3.helperServices?.geometry?.url;
  if (!a2) throw new s2("internal:geometry-service-url-not-configured", "No geometryServiceUrl in configuration");
  return a2;
}
async function a(e, o, a2 = null, c) {
  const l = await n2(a2, c), m = new p({ geometries: [e], outSpatialReference: o }), s3 = await n(l, m, { signal: c });
  if (s3 && Array.isArray(s3) && 1 === s3.length) return s3[0];
  throw new s2("internal:geometry-service-projection-failed", "Geometry projection failed on service");
}
export {
  n2 as getGeometryServiceURL,
  a as projectGeometry
};
//# sourceMappingURL=geometryServiceUtils-I7R7JNMV.js.map
