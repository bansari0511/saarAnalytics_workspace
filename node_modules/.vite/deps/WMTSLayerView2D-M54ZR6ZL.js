import {
  n,
  r as r3
} from "./chunk-LHSNRKOQ.js";
import "./chunk-IBAZJUR7.js";
import "./chunk-WZCCHOOA.js";
import "./chunk-UMZKDG42.js";
import {
  i as i2
} from "./chunk-I2KB67T7.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-XNWGMKSJ.js";
import {
  S
} from "./chunk-CKMNEXI4.js";
import {
  u
} from "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-K55CXVYD.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-RHBNP5DU.js";
import "./chunk-U3VDSMNO.js";
import "./chunk-JUUCGRXT.js";
import "./chunk-746KDGCX.js";
import "./chunk-IFDA5FOT.js";
import {
  p,
  r as r2
} from "./chunk-I6JJ2YOF.js";
import {
  h
} from "./chunk-PN5QNGVV.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import {
  e
} from "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-Q7V2BPNQ.js";
import {
  g
} from "./chunk-VW6I5NLV.js";
import "./chunk-IDPXYUC3.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import {
  s
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  b
} from "./chunk-N626Y23H.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var y = [0, 0];
var _ = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    const { activeLayer: e2 } = this.layer, { tileMatrixSet: t } = e2;
    if (t && s(t.tileInfo?.spatialReference, this.view.spatialReference)) return t;
    const i3 = this._getTileMatrixSetBySpatialReference(e2);
    return i3 && i3.id !== e2.tileMatrixSetId ? (e2.tileMatrixSetId = i3.id, i3) : null;
  }
  update(e2) {
    this._fetchQueue.pause(), this._fetchQueue.state = e2.state, this._tileStrategy.update(e2), this._fetchQueue.resume();
  }
  attach() {
    const e2 = this.tileMatrixSet?.tileInfo;
    e2 && (this._tileInfoView = new h(e2), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e3, t) => this.fetchTile(e3, t), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: true, acquireTile: (e3) => this.acquireTile(e3), releaseTile: (e3) => this.releaseTile(e3), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add((() => [this.layer?.activeLayer?.styleId, this.tileMatrixSet]), (() => this.doRefresh()))), super.attach());
  }
  detach() {
    super.detach(), this._tileStrategy?.destroy(), this._fetchQueue?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e2) {
    return this.layer.activeLayer.tileMatrixSets?.some(((t) => s(t.tileInfo?.spatialReference, e2))) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh(((e2) => this._updatingHandles.addPromise(this._enqueueTileFetch(e2))));
    }
  }
  acquireTile(e2) {
    const t = this._bitmapView.createTile(e2), i3 = t.bitmap;
    return [i3.x, i3.y] = this._tileInfoView.getTileCoords(y, t.key), i3.resolution = this._tileInfoView.getTileResolution(t.key), [i3.width, i3.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e2) {
    this._fetchQueue.abort(e2.key.id), this._bitmapView.removeChild(e2), e2.once("detach", (() => e2.destroy())), this.requestUpdate();
  }
  async fetchTile(e2, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r4, resamplingLevel: a2 = 0 } = t;
    if (!s2) return this._fetchImage(e2, r4);
    const l = new e(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e2.level, e2.row, e2.col, l, { signal: r4 }), o = await this._fetchImage(l, r4);
    } catch (n2) {
      if (b(n2)) throw n2;
      if (a2 < 3) {
        const i3 = this._tileInfoView.getTileParentId(e2.id);
        if (i3) {
          const s3 = new e(i3), r5 = await this.fetchTile(s3, { ...t, resamplingLevel: a2 + 1 });
          return n(this._tileInfoView, r5, s3, e2);
        }
      }
      throw n2;
    }
    return n(this._tileInfoView, o, l, e2);
  }
  canResume() {
    const e2 = super.canResume();
    return e2 ? null !== this.tileMatrixSet : e2;
  }
  async _enqueueTileFetch(e2) {
    if (!this._fetchQueue.has(e2.key.id)) {
      try {
        const t = await this._fetchQueue.push(e2.key);
        e2.bitmap.source = t, e2.bitmap.width = this._tileInfoView.tileInfo.size[0], e2.bitmap.height = this._tileInfoView.tileInfo.size[1], e2.once("attach", (() => this.requestUpdate()));
      } catch (s2) {
        b(s2) || i.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e2, t) {
    return this.layer.fetchImageBitmapTile(e2.level, e2.row, e2.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e2) {
    return e2.tileMatrixSets?.find(((e3) => s(e3.tileInfo?.spatialReference, this.view.spatialReference)));
  }
};
r([m({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = r([a("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-M54ZR6ZL.js.map
