import {
  m as m2,
  m2 as m3,
  m3 as m4,
  n,
  y
} from "./chunk-CHGOIEF2.js";
import {
  g
} from "./chunk-VG6LBSDM.js";
import {
  p as p2,
  s
} from "./chunk-UIO6TUGM.js";
import {
  l as l2
} from "./chunk-2OFZKHVN.js";
import {
  f as f2
} from "./chunk-ZS6XBZGY.js";
import {
  u
} from "./chunk-2R53FNGL.js";
import {
  a as a2
} from "./chunk-CUUDF5R2.js";
import {
  r as r2
} from "./chunk-ZT3IR6LI.js";
import {
  f
} from "./chunk-5HCEYXY5.js";
import {
  p
} from "./chunk-MOMLPET6.js";
import {
  l
} from "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import {
  w
} from "./chunk-X26VPODZ.js";
import {
  o
} from "./chunk-XNYPRDKK.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";

// node_modules/@arcgis/core/rest/support/AttributeBinsQuery.js
var b = new o({ asc: "ascending", desc: "descending" });
var B = { base: y, key: "type", typeMap: { "auto-interval": m2, date: m3, "fixed-boundaries": n, "fixed-interval": m4 } };
var R = class extends a2.ClonableMixin(l) {
  constructor(e) {
    super(e), this.binParameters = null, this.binOrder = "ascending", this.cacheHint = void 0, this.datumTransformation = null, this.defaultSpatialReference = null, this.distance = void 0, this.geometry = null, this.lowerBoundaryAlias = null, this.outSpatialReference = null, this.outStatistics = null, this.returnDistinctValues = null, this.spatialRelationship = "intersects", this.timeExtent = null, this.upperBoundaryAlias = null, this.units = null, this.where = "1=1";
  }
  set outTimeZone(e) {
    this._set("outTimeZone", e), e && !p(e) && i.getLogger(this).warn("#outTimeZone", `the parsed value '${e}' may not be a valid IANA time zone`);
  }
};
r([m({ types: B, json: { name: "bin", write: true } })], R.prototype, "binParameters", void 0), r([r2(b)], R.prototype, "binOrder", void 0), r([m({ type: Boolean, json: { write: true } })], R.prototype, "cacheHint", void 0), r([m({ json: { write: true } })], R.prototype, "datumTransformation", void 0), r([m({ type: f, json: { name: "defaultSR", write: true } })], R.prototype, "defaultSpatialReference", void 0), r([m({ type: Number, json: { write: { overridePolicy: (e) => ({ enabled: e > 0 }) } } })], R.prototype, "distance", void 0), r([m({ types: l2, json: { read: f2, write: true } })], R.prototype, "geometry", void 0), r([m({ type: String, json: { write: true } })], R.prototype, "lowerBoundaryAlias", void 0), r([m({ type: f, json: { name: "outSR", write: true } })], R.prototype, "outSpatialReference", void 0), r([m({ type: [p2], json: { write: { enabled: true, overridePolicy() {
  return { enabled: null != this.outStatistics && this.outStatistics.length > 0 };
} } } })], R.prototype, "outStatistics", void 0), r([m({ value: null, json: { name: "outTimeReference", read: { reader: (e) => e.ianaTimeZone }, write: { writer: (e, t, o2) => {
  e && (t[o2] = { ianaTimeZone: e });
} } } })], R.prototype, "outTimeZone", null), r([m({ type: Boolean, json: { write: true } })], R.prototype, "returnDistinctValues", void 0), r([r2(s, { name: "spatialRel" })], R.prototype, "spatialRelationship", void 0), r([m({ type: u, json: { write: true } })], R.prototype, "timeExtent", void 0), r([m({ type: String, json: { write: true } })], R.prototype, "upperBoundaryAlias", void 0), r([m({ type: String, json: { read: g.read, write: { writer: g.write, overridePolicy(e) {
  return { enabled: null != e && null != this.distance };
} } } })], R.prototype, "units", void 0), r([m({ type: String, json: { write: true } })], R.prototype, "where", void 0), R = r([a("esri.rest.support.AttributeBinsQuery")], R), R.from = w(R);

export {
  R
};
//# sourceMappingURL=chunk-IUY7MOVH.js.map
