import {
  i
} from "./chunk-ALEMPM66.js";
import "./chunk-GOVYB53C.js";
import {
  R as R2
} from "./chunk-5F6ISSMI.js";
import {
  t
} from "./chunk-P7KAQGGQ.js";
import "./chunk-CHGOIEF2.js";
import "./chunk-SMPICNST.js";
import "./chunk-T7S34Q47.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import {
  R
} from "./chunk-DCQ3YZVB.js";
import "./chunk-QTS3VC6A.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-3CFYBBSV.js";
import {
  f
} from "./chunk-POHAWIBC.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import {
  v
} from "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import {
  c,
  s
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import "./chunk-GWXO4XME.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  H
} from "./chunk-T3PXBZJ3.js";
import {
  I,
  V
} from "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/rest/query/operations/queryAttributeBins.js
function l(t2) {
  const e = t2.geometry, i3 = t2.toJSON(), r = i3;
  let u, l2, a2;
  if (null != e && (l2 = e.spatialReference, a2 = c(l2), r.geometryType = v(e), r.geometry = JSON.stringify(e), r.inSR = a2), i3.outSR ? (r.outSR = c(i3.outSR), u = t2.outSpatialReference) : e && (r.outSR = r.inSR, u = l2), r.bin &&= JSON.stringify(r.bin), r.quantizationParameters &&= JSON.stringify(r.quantizationParameters), r.outStatistics &&= JSON.stringify(r.outStatistics), r.outTimeReference &&= JSON.stringify(r.outTimeReference), i3.timeExtent) {
    const t3 = i3.timeExtent, { start: e2, end: n } = t3;
    null == e2 && null == n || (r.time = e2 === n ? e2 : `${e2 ?? "null"},${n ?? "null"}`), delete i3.timeExtent;
  }
  return t2.defaultSpatialReference && s(l2, u) && (r.defaultSR = r.inSR, delete r.inSR, delete r.outSR), r;
}
async function a(t2, e, i3) {
  return null != e.timeExtent && e.timeExtent.isEmpty ? { data: { features: [] } } : await m(t2, e, i3);
}
async function m(n, o, s2 = {}) {
  const a2 = "string" == typeof n ? I(n) : n, m2 = o.geometry ? [o.geometry] : [], f2 = await R(m2, null, { signal: s2.signal }), y = f2?.[0];
  null != y && ((o = o.clone()).geometry = y);
  const p = t({ ...a2.query, f: "json", ...l(o) });
  return H(V(a2.path, "queryBins"), { ...s2, query: { ...p, ...s2.query } });
}

// node_modules/@arcgis/core/rest/query/executeAttributeBinsQuery.js
async function i2(i3, s2, u) {
  const { data: m2 } = await a(f(i3), R2.from(s2), u);
  return i.fromJSON(m2);
}
export {
  i2 as executeAttributeBinsQuery
};
//# sourceMappingURL=executeAttributeBinsQuery-IZ2LGU4A.js.map
