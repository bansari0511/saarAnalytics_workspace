import {
  L,
  sn
} from "./chunk-XYME6BO6.js";
import {
  V
} from "./chunk-YQ5L6J6K.js";
import {
  P
} from "./chunk-ZBYB4REQ.js";
import {
  l
} from "./chunk-JA3AQLAK.js";
import {
  a2 as a,
  s
} from "./chunk-S62CSPIH.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";

// node_modules/@arcgis/core/layers/support/PolygonCollection.js
var c;
var p = c = class extends l.JSONSupportMixin(V.ofType(P)) {
  constructor(e) {
    super(e);
  }
  clone() {
    return new c(this.items.map(((e) => e.clone())));
  }
  write(e, r2) {
    return this.toJSON(r2);
  }
  toJSON(e) {
    const r2 = e?.layer?.spatialReference;
    return r2 ? this.toArray().map(((o) => {
      if (!r2.equals(o.spatialReference)) {
        if (!L(o.spatialReference, r2)) return e?.messages?.push(new s("scenefilter:unsupported", "Scene filters with incompatible spatial references are not supported", { modification: this, spatialReference: e.layer.spatialReference, context: e })), null;
        const s3 = new P();
        sn(o, s3, r2), o = s3;
      }
      const s2 = o.toJSON(e);
      return delete s2.spatialReference, s2;
    })).filter(((e2) => null != e2)) : this.toArray().map(((r3) => r3.toJSON(e)));
  }
  static fromJSON(e, r2) {
    const o = new c();
    return e.forEach(((e2) => o.add(P.fromJSON(e2, r2)))), o;
  }
};
p = c = r([a("esri.layers.support.PolygonCollection")], p);
var l2 = p;

export {
  l2 as l
};
//# sourceMappingURL=chunk-U4PT3N5A.js.map
