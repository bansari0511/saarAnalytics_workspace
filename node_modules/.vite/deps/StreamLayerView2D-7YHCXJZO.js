import {
  ce,
  n as n2
} from "./chunk-W47ATVP4.js";
import "./chunk-TAGXDKGG.js";
import "./chunk-JUNAC3QL.js";
import "./chunk-7GLQRUVF.js";
import "./chunk-IE6AQNQH.js";
import "./chunk-UMZKDG42.js";
import "./chunk-U3M2HTCF.js";
import "./chunk-I2KB67T7.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-XNWGMKSJ.js";
import "./chunk-CKMNEXI4.js";
import "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import "./chunk-YGH5IYUW.js";
import "./chunk-4EF2YJSI.js";
import "./chunk-2LSIYJMZ.js";
import "./chunk-GYPE5A7A.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ISUXP2OL.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-MFXX2MV4.js";
import {
  d
} from "./chunk-O6RGVUWL.js";
import "./chunk-JSADYHZ3.js";
import "./chunk-5MUPVMW7.js";
import "./chunk-URBRKEAB.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-G2PEGJ7A.js";
import "./chunk-5H6DUUYZ.js";
import "./chunk-Y2LRIJL4.js";
import "./chunk-2B7VWJ3M.js";
import "./chunk-N22DWT46.js";
import "./chunk-7BL5FEWJ.js";
import "./chunk-OAEHASLX.js";
import "./chunk-SM6D23CI.js";
import "./chunk-LMZOCCGG.js";
import "./chunk-KKLYYV7Q.js";
import "./chunk-T3IP3HXQ.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-QGU2IM7A.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-66Z3HNDG.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-MFFIM4CO.js";
import "./chunk-ALEMPM66.js";
import "./chunk-PGNIZQW2.js";
import {
  g
} from "./chunk-GOVYB53C.js";
import "./chunk-5F6ISSMI.js";
import "./chunk-ZLQRJCGG.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-F2L4YQPV.js";
import "./chunk-ERF6G26E.js";
import "./chunk-IB7M24YC.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-6MQQZWN5.js";
import "./chunk-KOG667X7.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-CHGOIEF2.js";
import "./chunk-SMPICNST.js";
import "./chunk-T7S34Q47.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-YXTIORDS.js";
import "./chunk-WX3VZIBK.js";
import "./chunk-RHBNP5DU.js";
import "./chunk-U3VDSMNO.js";
import "./chunk-JUUCGRXT.js";
import "./chunk-746KDGCX.js";
import "./chunk-SVGSXWMQ.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-JVE3K2KO.js";
import "./chunk-I6JJ2YOF.js";
import "./chunk-PN5QNGVV.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-4TCHR3Y7.js";
import "./chunk-A2AZM62Y.js";
import "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-Q7V2BPNQ.js";
import "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import "./chunk-DCQ3YZVB.js";
import "./chunk-QTS3VC6A.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-POHAWIBC.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import "./chunk-ZS6XBZGY.js";
import {
  n
} from "./chunk-FOPBVVXE.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-GIMN3QZ5.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-KA2INOMU.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-FRFSBIYZ.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-FV6ZNHFI.js";
import {
  l
} from "./chunk-IBLVGHDR.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  e,
  t
} from "./chunk-N626Y23H.js";
import {
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var r2 = (r3) => {
  let i = class extends r3 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    disconnect() {
      this._doDisconnect();
    }
    connect() {
      this._doConnect();
    }
    clear() {
      this._doClear();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return (this._isUserPaused || this.suspended) && "connected" === this._streamConnectionStatus ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return r([m()], i.prototype, "_isUserPaused", void 0), r([m({ readOnly: true })], i.prototype, "connectionStatus", null), r([m({ type: d })], i.prototype, "filter", void 0), i = r([a("esri.views.layers.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
var p = class extends r2(ce) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null;
  }
  initialize() {
    this.addHandles([l((() => this.layer.customParameters), (async (e2) => {
      (await this.getWorker()).streamMessenger.updateCustomParameters(e2);
    })), this.layer.on("send-message-to-socket", (async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToSocket(e2);
    })), this.layer.on("send-message-to-client", (async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToClient(e2), this._isUserPaused && "type" in e2 && "clear" === e2.type && this.incrementSourceRefreshVersion();
    })), l((() => this.layer.purgeOptions), (() => this._update())), l((() => this.suspended), this._onSuspendedChange.bind(this))], "constructor"), this._doResume();
  }
  destroy() {
    this._doPause();
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e2, r3) {
    if (Array.isArray(e2)) return t(e2.map(((e3) => this.on(e3, r3))));
    const n3 = ["data-received", "message-received"].includes(e2);
    n3 && this.getWorker().then(((r4) => r4.streamMessenger.enableEvent(e2, true)));
    const o = super.on(e2, r3), i = this;
    return e((() => {
      o.remove(), n3 && (i._workerProxy.closed || i.hasEventListener(e2) || i.getWorker().then(((r4) => r4.streamMessenger.enableEvent(e2, false))));
    }));
  }
  async queryLatestObservations(e2, t2) {
    if (!(this.layer.timeInfo?.endField || this.layer.timeInfo?.startField || this.layer.timeInfo?.trackIdField)) throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    const s2 = await this.getWorker();
    return n2(s2.features.executeQueryForLatestObservations(this._cleanUpQuery(e2), t2).then(((e3) => {
      const r3 = g.fromJSON(e3);
      return r3.features.forEach(((e4) => {
        e4.layer = this.layer, e4.sourceLayer = this.layer;
      })), r3;
    })), new g({ features: [] }));
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  async queryObjectIds(e2, r3) {
    return (await super.queryObjectIds(e2, r3)).filter(n);
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    null != this._refreshInterval && (clearInterval(this._refreshInterval), this._refreshInterval = null);
  }
  _doResume() {
    null == this._refreshInterval && (this._refreshInterval = setInterval((() => this.incrementSourceRefreshVersion()), this.layer.updateInterval));
  }
  _doDisconnect() {
    this.getWorker().then(((e2) => e2.streamMessenger.disconnect())), this._doPause();
  }
  _doConnect() {
    this.getWorker().then(((e2) => e2.streamMessenger.connect())), this.resume();
  }
  _doClear() {
    this.getWorker().then(((e2) => e2.streamMessenger.clear())), null == this._refreshInterval && this.incrementSourceRefreshVersion();
  }
  _createClientOptions() {
    const e2 = super._createClientOptions(), r3 = this;
    return { ...e2, get container() {
      return r3.featureContainer;
    }, setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
};
r([m()], p.prototype, "pipelineConnectionStatus", void 0), r([m()], p.prototype, "pipelineErrorString", void 0), r([m({ readOnly: true })], p.prototype, "connectionError", null), r([m({ readOnly: true })], p.prototype, "_streamConnectionStatus", null), p = r([a("esri.views.2d.layers.StreamLayerView2D")], p);
var d2 = p;
export {
  d2 as default
};
//# sourceMappingURL=StreamLayerView2D-7YHCXJZO.js.map
