import {
  S
} from "./chunk-FTRRGWPV.js";
import {
  u
} from "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-T7LFML3O.js";
import "./chunk-JUUCGRXT.js";
import "./chunk-746KDGCX.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-Q7V2BPNQ.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-7OH24VUH.js";
import "./chunk-INI6MHIQ.js";
import {
  n,
  t
} from "./chunk-5NFV6CXP.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import {
  V
} from "./chunk-YQ5L6J6K.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import {
  U,
  l
} from "./chunk-IBLVGHDR.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-SH3CUEMB.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-N626Y23H.js";
import "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/layers/GroupLayerView.js
var h = class extends u {
  constructor(i) {
    super(i), this.type = "group", this.layerViews = new V();
  }
  destroy() {
    this.layerViews.length = 0;
  }
  _allLayerViewVisibility(i) {
    this.layerViews.forEach(((e) => {
      e.visible = i;
    }));
  }
  initialize() {
    this.addHandles([this.layerViews.on("change", ((i) => this._layerViewsChangeHandler(i))), l((() => this.layer?.visibilityMode), (() => {
      this.layer && this._applyVisibility((() => this._allLayerViewVisibility(this.visible)), (() => this._applyExclusiveVisibility(null)));
    }), U), l((() => this.visible), ((i) => {
      this._applyVisibility((() => this._allLayerViewVisibility(i)), (() => {
      }));
    }), U)], "grouplayerview"), this._layerViewsChangeHandler({ target: null, added: this.layerViews.toArray(), removed: [], moved: [] });
  }
  get creatingLayerViews() {
    return this.view?.layerViewManager?.isCreatingLayerViewsForLayer(this.layer) ?? false;
  }
  set layerViews(i) {
    this._set("layerViews", n(i, this._get("layerViews")));
  }
  get updatingProgress() {
    return 0 === this.layerViews.length ? 1 : this.layerViews.reduce(((i, e) => i + e.updatingProgress), 0) / this.layerViews.length;
  }
  isUpdating() {
    return this.creatingLayerViews || this.layerViews.some(((i) => i.updating));
  }
  _hasLayerViewVisibleOverrides() {
    return this.layerViews.some(((i) => i._isOverridden("visible")));
  }
  _findLayerViewForLayer(i) {
    return i && this.layerViews.find(((e) => e.layer === i));
  }
  _firstVisibleOnLayerOrder() {
    const i = this.layer.layers.find(((i2) => {
      const e = this._findLayerViewForLayer(i2);
      return !!e?.visible;
    }));
    return i && this._findLayerViewForLayer(i);
  }
  _applyExclusiveVisibility(i) {
    null == i && null == (i = this._firstVisibleOnLayerOrder()) && this.layerViews.length > 0 && (i = this._findLayerViewForLayer(this.layer.layers.at(0))), this.layerViews.forEach(((e) => {
      e.visible = e === i;
    }));
  }
  _layerViewsChangeHandler(i) {
    this.removeHandles("grouplayerview:visible"), this.addHandles(this.layerViews.map(((i2) => l((() => i2.visible), ((e2) => this._applyVisibility((() => {
      e2 !== this.visible && (i2.visible = this.visible);
    }), (() => this._applyExclusiveVisibility(e2 ? i2 : null)))), U))).toArray(), "grouplayerview:visible");
    const e = i.added[i.added.length - 1];
    this._applyVisibility((() => this._allLayerViewVisibility(this.visible)), (() => this._applyExclusiveVisibility(e?.visible ? e : null)));
  }
  _applyVisibility(i, e) {
    this._hasLayerViewVisibleOverrides() && ("inherited" === this.layer?.visibilityMode ? i() : "exclusive" === this.layer?.visibilityMode && e());
  }
};
r([m({ readOnly: true })], h.prototype, "creatingLayerViews", null), r([m({ cast: t })], h.prototype, "layerViews", null), r([m({ readOnly: true })], h.prototype, "updatingProgress", null), r([m()], h.prototype, "view", void 0), h = r([a("esri.views.layers.GroupLayerView")], h);

// node_modules/@arcgis/core/views/2d/layers/GroupLayerView2D.js
var a2 = class extends S(h) {
  attach() {
    this._updateStageChildren(), this.addAttachHandles(this.layerViews.on("after-changes", (() => this._updateStageChildren())));
  }
  detach() {
    this.container.removeAllChildren();
  }
  update(e) {
  }
  viewChange() {
  }
  moveEnd() {
  }
  _updateStageChildren() {
    this.container.removeAllChildren(), this.layerViews.forEach(((e, r2) => this.container.addChildAt(e.container, r2)));
  }
};
a2 = r([a("esri.views.2d.layers.GroupLayerView2D")], a2);
var o = a2;
export {
  o as default
};
//# sourceMappingURL=GroupLayerView2D-NP45ZLZP.js.map
