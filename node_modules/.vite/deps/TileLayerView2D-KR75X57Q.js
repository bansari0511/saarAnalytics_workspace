import {
  n,
  o,
  r as r3
} from "./chunk-LHSNRKOQ.js";
import {
  P,
  _,
  i as i3
} from "./chunk-M7IMNATE.js";
import {
  r as r4
} from "./chunk-MMIBV7EX.js";
import {
  a as a2
} from "./chunk-FMZJXSKY.js";
import "./chunk-5FTGEHVF.js";
import "./chunk-JEIPW32A.js";
import "./chunk-VAPKU7X4.js";
import "./chunk-NCD2Z76P.js";
import {
  O
} from "./chunk-QPWPHBKW.js";
import "./chunk-IBAZJUR7.js";
import "./chunk-WZCCHOOA.js";
import "./chunk-7GLQRUVF.js";
import "./chunk-IE6AQNQH.js";
import "./chunk-UMZKDG42.js";
import "./chunk-U3M2HTCF.js";
import {
  i as i2
} from "./chunk-I2KB67T7.js";
import "./chunk-G6DMFUCZ.js";
import "./chunk-XNWGMKSJ.js";
import {
  S
} from "./chunk-CKMNEXI4.js";
import {
  u
} from "./chunk-FEKQ3IYH.js";
import "./chunk-BWRMUFNW.js";
import "./chunk-JRBH6HCP.js";
import "./chunk-TI4LRNX7.js";
import "./chunk-JOKMLVBH.js";
import "./chunk-2LSIYJMZ.js";
import "./chunk-GYPE5A7A.js";
import "./chunk-M2X3ONOZ.js";
import "./chunk-SMJO7RZ5.js";
import "./chunk-OBI6XSOO.js";
import "./chunk-ZYWMFOAJ.js";
import "./chunk-FXWNGVAA.js";
import "./chunk-6HU6D6AI.js";
import "./chunk-CO23VBIK.js";
import "./chunk-VBCNZP4X.js";
import "./chunk-QFNAF2OO.js";
import "./chunk-RYUENKYI.js";
import "./chunk-GBOUNRWE.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-AOUY3PF4.js";
import "./chunk-ENKERMEC.js";
import "./chunk-KKLYYV7Q.js";
import "./chunk-T3IP3HXQ.js";
import "./chunk-TRRRRFK2.js";
import "./chunk-W7HTQBDK.js";
import "./chunk-ISZVN2MZ.js";
import "./chunk-QGU2IM7A.js";
import "./chunk-Q2JFTIYQ.js";
import "./chunk-SNXPARJV.js";
import "./chunk-WKQKH2TM.js";
import "./chunk-WGJD7U4H.js";
import "./chunk-XCRRWPA6.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-OZLQAICY.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-QIDR2RCE.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-MFFIM4CO.js";
import "./chunk-C5RMBVA5.js";
import "./chunk-PGNIZQW2.js";
import "./chunk-4TCLGGOP.js";
import "./chunk-VQWEDC6T.js";
import "./chunk-TB5L7XWS.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-PBRYZOOK.js";
import "./chunk-WQVSDGVK.js";
import "./chunk-WC2H7YQR.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-LIWGRYNH.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-4QXO2FM6.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-O4T62PMJ.js";
import "./chunk-SMPICNST.js";
import "./chunk-O4VTUNJU.js";
import "./chunk-CEL2APQW.js";
import "./chunk-7Y4U2JD3.js";
import "./chunk-GCTSCKPO.js";
import "./chunk-6U4EGJOK.js";
import "./chunk-W7U4L72B.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-DDDZPNGZ.js";
import "./chunk-GQBGK7RW.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-YXTIORDS.js";
import "./chunk-JWSEYL4W.js";
import "./chunk-CA5QK7QF.js";
import "./chunk-5WW35KU4.js";
import "./chunk-RHBNP5DU.js";
import "./chunk-U3VDSMNO.js";
import "./chunk-JUUCGRXT.js";
import {
  c as c2
} from "./chunk-746KDGCX.js";
import "./chunk-7B3GFFLM.js";
import "./chunk-OB2KZAI3.js";
import "./chunk-SVGSXWMQ.js";
import {
  c
} from "./chunk-LICN3WYG.js";
import "./chunk-QZBNKN5E.js";
import "./chunk-IFDA5FOT.js";
import "./chunk-D5KSFCG5.js";
import {
  p,
  r as r2
} from "./chunk-I6JJ2YOF.js";
import {
  h
} from "./chunk-PN5QNGVV.js";
import "./chunk-JUXSLKSN.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import {
  e as e2
} from "./chunk-KW37MFF6.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-Y2AI7GA5.js";
import "./chunk-P3R3JSYO.js";
import "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-CAQUPYHC.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-Q7V2BPNQ.js";
import "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import {
  g
} from "./chunk-VW6I5NLV.js";
import "./chunk-IDPXYUC3.js";
import "./chunk-DCQ3YZVB.js";
import "./chunk-QTS3VC6A.js";
import "./chunk-EVAICJFZ.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-POHAWIBC.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-KPGNM4LZ.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-7OH24VUH.js";
import "./chunk-AACFCXAP.js";
import "./chunk-P5DG4SNT.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-KA2INOMU.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import {
  s
} from "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m2 as m
} from "./chunk-GWXO4XME.js";
import {
  a2 as a
} from "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import {
  r
} from "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import {
  D,
  b,
  e
} from "./chunk-N626Y23H.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var I = [0, 0];
var P2 = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), this._highlightView?.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, i4 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, i4?.effectiveMinLOD, i4?.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i5) => this.fetchTile(e4, i5), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), _(this, this.layer)) {
      const e4 = this._highlightView = new O({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new P({ createFetchPopupFeaturesQueryGeometry: (e5, i5) => r4(e5, i5, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: ({ graphic: i5, property: t }) => e4.graphicUpdateHandler({ graphic: i5, property: t }), layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add((() => this.resampling), (() => {
      this.doRefresh();
    }))), super.attach();
  }
  detach() {
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._popupHighlightHelper?.destroy(), this._highlightView?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, i4) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, i4) : [];
  }
  highlight(e3, t) {
    const s2 = i3(e3);
    if (0 === s2.length) return e();
    const r5 = t?.name ?? c2;
    return this._addHighlightGraphics(s2, r5), e((() => !this.destroyed && this._removeHighlightGraphics(s2, r5)));
  }
  _processHighlight() {
    const e3 = this._getHighlights();
    this._highlightView?.setHighlight(e3);
  }
  _addHighlightGraphics(e3, i4) {
    this._highlightGraphics.addMany(e3), this._addHighlights(e3.map(((e4) => e4.uid)), i4);
  }
  _removeHighlightGraphics(e3, i4) {
    this._highlightGraphics.removeMany(e3), this._removeHighlights(e3.map(((e4) => e4.uid)), i4);
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    return s(this.layer.tileInfo?.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh(((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3))));
    }
  }
  acquireTile(e3) {
    const i4 = this._bitmapView.createTile(e3), t = i4.bitmap;
    return [t.x, t.y] = this._tileInfoView.getTileCoords(I, i4.key), t.resolution = this._tileInfoView.getTileResolution(i4.key), [t.width, t.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(i4)), this._bitmapView.addChild(i4), this.requestUpdate(), i4;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", (() => e3.destroy())), this.requestUpdate();
  }
  async fetchTile(e3, i4 = {}) {
    return this.tilemapCache ? this._fetchTileWithTilemapCache(e3, i4) : this._fetchTileWithoutTilemapCache(e3, i4);
  }
  async _fetchTileWithoutTilemapCache(e3, i4 = {}) {
    const { signal: t, resamplingLevel: r5 = 0 } = i4;
    try {
      return await this._fetchImage(e3, t);
    } catch (o2) {
      if (b(o2)) throw o2;
      if (!this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (r5 < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          const s2 = new e2(t2), o3 = await this._fetchTileWithoutTilemapCache(s2, { ...i4, resamplingLevel: r5 + 1 });
          return n(this._tileInfoView, o3, s2, e3);
        }
      }
      return o(this._tileInfoView.tileInfo.size);
    }
  }
  async _fetchTileWithTilemapCache(e3, i4 = {}) {
    const t = this.tilemapCache, { signal: o2, resamplingLevel: l = 0 } = i4, h2 = new e2(0, 0, 0, 0);
    let a3, n2 = null;
    try {
      if (n2 = await t.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, h2, { signal: o2 }), !this.resampling && h2.level !== e3.level) return await D(i4), o(this._tileInfoView.tileInfo.size);
      a3 = await this._fetchImage(h2, o2);
    } catch (p2) {
      if (b(p2)) throw p2;
      if (this.resampling && "unknown" === n2 && l < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          h2.set(t2);
          try {
            a3 = await this._fetchTileWithTilemapCache(h2, { ...i4, resamplingLevel: l + 1 });
          } catch {
          }
        }
      }
    }
    return a3 ? this.resampling ? n(this._tileInfoView, a3, h2, e3) : a3 : o(this._tileInfoView.tileInfo.size);
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i4 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i4, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", (() => this.requestUpdate()));
      } catch (i4) {
        b(i4) || i.getLogger(this).error(i4);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i4) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i4 });
  }
};
r([m()], P2.prototype, "resampling", null), r([m()], P2.prototype, "tilemapCache", null), P2 = r([a("esri.views.2d.layers.TileLayerView2D")], P2);
var C = P2;
export {
  C as default
};
//# sourceMappingURL=TileLayerView2D-KR75X57Q.js.map
