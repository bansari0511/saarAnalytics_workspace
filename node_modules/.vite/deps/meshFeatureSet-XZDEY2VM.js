import {
  i as i3,
  n as n2
} from "./chunk-MKWZCCIC.js";
import {
  q
} from "./chunk-CKAK3LUN.js";
import "./chunk-JELQ5XT2.js";
import "./chunk-TOD32WVA.js";
import "./chunk-DTPLSS5W.js";
import "./chunk-PGNIZQW2.js";
import {
  i as i2,
  n
} from "./chunk-XYZKK53K.js";
import "./chunk-CSKMVLQN.js";
import "./chunk-RPGAK5ZK.js";
import "./chunk-UOPYBVLJ.js";
import "./chunk-ZP4H4Q6R.js";
import "./chunk-V5GIC4SS.js";
import "./chunk-2EEBDUL4.js";
import "./chunk-KX3QNWMZ.js";
import "./chunk-HPADPQJ7.js";
import {
  g
} from "./chunk-GOVYB53C.js";
import {
  s
} from "./chunk-PTLGJ4Y6.js";
import "./chunk-X5BGX2UZ.js";
import "./chunk-IQIGYB5K.js";
import "./chunk-XBS7CLQC.js";
import "./chunk-IKYEKMWB.js";
import "./chunk-M72BPMIY.js";
import "./chunk-RTAXROJF.js";
import "./chunk-RHCPQ6AS.js";
import "./chunk-NN5O537H.js";
import "./chunk-RVYSAL6P.js";
import "./chunk-Y2CZFTFK.js";
import "./chunk-3JKWT76Y.js";
import "./chunk-LOLNWH3R.js";
import "./chunk-2VX5PHYR.js";
import "./chunk-QN64FJBC.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-I5XBK5ZU.js";
import {
  d
} from "./chunk-5NSTYRN5.js";
import "./chunk-34AZDDDE.js";
import "./chunk-EUBRYW5A.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-QQ2VVCKW.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-2RL34CVC.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-B6C2GOG6.js";
import "./chunk-K3VYMAVM.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import "./chunk-3CFYBBSV.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-TAUMJOU7.js";
import "./chunk-6S55M5FH.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-I4VURT5T.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-HGJX23PN.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-BZEUWBAD.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-AY7ZETF7.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import {
  z
} from "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import {
  f
} from "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import "./chunk-GWXO4XME.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-T3PXBZJ3.js";
import "./chunk-BMQ3IPHR.js";
import {
  u
} from "./chunk-JNYZ3I5R.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-N626Y23H.js";
import {
  i3 as i
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/rest/support/meshFeatureSet.js
var p = () => i.getLogger("esri.rest.support.meshFeatureSet");
function l(t, r, s2) {
  const o = s2.features;
  s2.features = [], delete s2.geometryType;
  const a = g.fromJSON(s2);
  if (a.geometryType = "mesh", !s2.assetMaps) return a;
  const u2 = g2(r, s2.assetMaps), i4 = t.sourceSpatialReference ?? f.WGS84, c = s2.globalIdFieldName, { outFields: m } = t, p2 = null != m && m.length > 0 ? y(m.includes("*") ? null : new Set(m)) : () => ({});
  for (const n3 of o) {
    const t2 = E(n3, c, i4, r, u2);
    a.features.push(new d({ geometry: t2, attributes: p2(n3) }));
  }
  return a;
}
function y(e) {
  return ({ attributes: t }) => {
    if (!t) return {};
    if (!e) return t;
    for (const r in t) e.has(r) || delete t[r];
    return t;
  };
}
function E(e, t, r, n3, a) {
  const u2 = e.attributes[t], i4 = a.get(u2);
  if (null == i4 || !e.geometry) return null;
  const f2 = n2(e.attributes, r, n3.transformFieldRoles), p2 = z.fromJSON(e.geometry);
  p2.spatialReference = r;
  const l2 = i3(e.attributes, n3.transformFieldRoles), y2 = r.isGeographic ? "local" : "georeferenced", E2 = d2(i4);
  return E2 ? q.createWithExternalSource(f2, E2, { extent: p2, transform: l2, vertexSpace: y2, unitConversionDisabled: true }) : q.createIncomplete(f2, { extent: p2, transform: l2, vertexSpace: y2 });
}
var h;
function g2(e, t) {
  const s2 = /* @__PURE__ */ new Map();
  for (const o of t) {
    const t2 = o.parentGlobalId;
    if (null == t2) continue;
    const n3 = o.assetName, a = o.assetType, u2 = o.assetHash, f2 = o.assetURL, c = o.conversionStatus, m = o.seqNo, l2 = s(a, e.supportedFormats);
    if (!l2) {
      p().error("mesh-feature-set:unknown-format", `Service returned an asset of type ${a}, but it does not list it as a supported type`);
      continue;
    }
    const y2 = u(s2, t2, (() => ({ files: /* @__PURE__ */ new Map() })));
    u(y2.files, n3, (() => ({ name: n3, type: a, mimeType: l2, status: S(c), parts: [] }))).parts[m] = { hash: u2, url: f2 };
  }
  return s2;
}
function d2(e) {
  const t = Array.from(e.files.values()), r = new Array();
  for (const s2 of t) {
    if (s2.status !== h.COMPLETED) return null;
    const e2 = new Array();
    for (const t2 of s2.parts) {
      if (!t2) return null;
      e2.push(new n(t2.url, t2.hash));
    }
    r.push(new i2(s2.name, s2.mimeType, e2));
  }
  return { type: "service", assets: r };
}
function S(e) {
  switch (e) {
    case "COMPLETED":
    case "SUBMITTED":
      return h.COMPLETED;
    case "INPROGRESS":
      return h.PENDING;
    default:
      return h.FAILED;
  }
}
!(function(e) {
  e[e.FAILED = 0] = "FAILED", e[e.PENDING = 1] = "PENDING", e[e.COMPLETED = 2] = "COMPLETED";
})(h || (h = {}));
export {
  g2 as assetMapFromAssetMapsJSON,
  E as extractMesh,
  l as meshFeatureSetFromJSON
};
//# sourceMappingURL=meshFeatureSet-XZDEY2VM.js.map
