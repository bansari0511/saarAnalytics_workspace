import {
  t
} from "./chunk-MX6BY66A.js";
import {
  Xe
} from "./chunk-3A63WODW.js";
import "./chunk-73734L7I.js";
import "./chunk-K6CAHOYR.js";
import "./chunk-6PSWWIGY.js";
import "./chunk-X54A5S3J.js";
import "./chunk-BZSAIP56.js";
import "./chunk-IQFA7YIN.js";
import "./chunk-GHJ57TNG.js";
import "./chunk-AZW6GDWJ.js";
import "./chunk-MFXX2MV4.js";
import "./chunk-O6RGVUWL.js";
import "./chunk-G2YKZHYQ.js";
import "./chunk-FGPKHX4G.js";
import "./chunk-R7CNDNGI.js";
import "./chunk-KGDMV4MR.js";
import "./chunk-MZ6XR6HP.js";
import "./chunk-DBTEUCHQ.js";
import "./chunk-MI2SWXYL.js";
import "./chunk-RSMXPB5H.js";
import "./chunk-FI7A2I5K.js";
import "./chunk-2FIN3MB5.js";
import "./chunk-GBOUNRWE.js";
import "./chunk-NL2NZDM4.js";
import "./chunk-JSADYHZ3.js";
import "./chunk-7SLD6UJQ.js";
import "./chunk-FBQHQDLT.js";
import "./chunk-CCSAZNG5.js";
import "./chunk-7QI7J4JB.js";
import "./chunk-TDFQY4TL.js";
import "./chunk-BPVOXAWI.js";
import "./chunk-K54LZFQX.js";
import "./chunk-URBRKEAB.js";
import "./chunk-FT4FDH6N.js";
import "./chunk-XGN6BPAP.js";
import "./chunk-FAYGOXZ3.js";
import "./chunk-SIRTOV2N.js";
import "./chunk-7VD3IPFA.js";
import "./chunk-KFLBCUTX.js";
import "./chunk-TYGU3EXP.js";
import "./chunk-ZQUEN26P.js";
import "./chunk-PNZTL5C4.js";
import "./chunk-EU5HNJUP.js";
import "./chunk-TNGT5LD3.js";
import "./chunk-YKZMZKSQ.js";
import "./chunk-QVVUEHRT.js";
import "./chunk-5H6DUUYZ.js";
import "./chunk-NBK7CQDR.js";
import "./chunk-4COYKAT6.js";
import "./chunk-4PMAEDAD.js";
import "./chunk-SM6D23CI.js";
import "./chunk-CKXK33BB.js";
import "./chunk-7BL5FEWJ.js";
import "./chunk-OAEHASLX.js";
import {
  g
} from "./chunk-PX666UG6.js";
import "./chunk-AR6ZOSCT.js";
import "./chunk-PTLGJ4Y6.js";
import "./chunk-7QAQW3R4.js";
import "./chunk-XSLTJTXI.js";
import "./chunk-KFNWBWN4.js";
import "./chunk-K55CXVYD.js";
import "./chunk-EEG2HGFZ.js";
import "./chunk-KCEUIRTN.js";
import "./chunk-CIYAWLSD.js";
import "./chunk-GDJLDPJ6.js";
import "./chunk-SE3G7TVO.js";
import "./chunk-ZWFRZAOO.js";
import "./chunk-ZLQRJCGG.js";
import "./chunk-WMN22ENS.js";
import "./chunk-UZ3YWBWC.js";
import "./chunk-K5CV62SX.js";
import "./chunk-2EOHKZLO.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-T7S34Q47.js";
import "./chunk-AZ6KC3UF.js";
import "./chunk-UICDKBDP.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-QPV4BKBC.js";
import "./chunk-LQQCPLIT.js";
import "./chunk-4O46EK5T.js";
import {
  h,
  i as i2,
  r
} from "./chunk-GQBGK7RW.js";
import "./chunk-EMULKSUV.js";
import "./chunk-AY3JR4QM.js";
import "./chunk-LJ33ZUQ3.js";
import "./chunk-CAHBBZSR.js";
import "./chunk-4IWWMMA3.js";
import "./chunk-A2AZM62Y.js";
import {
  d
} from "./chunk-7H3DALFB.js";
import "./chunk-TULIAEWT.js";
import "./chunk-N75Y7HEU.js";
import "./chunk-2CS746FZ.js";
import "./chunk-JKIFCUQO.js";
import "./chunk-WWAX5Q53.js";
import "./chunk-BJHD4EAD.js";
import "./chunk-NXY7NRQW.js";
import "./chunk-2BKRWNDZ.js";
import "./chunk-NSIIITDR.js";
import "./chunk-UIO6TUGM.js";
import "./chunk-3Y2NDRJ3.js";
import "./chunk-63MMKYGO.js";
import "./chunk-2OFZKHVN.js";
import "./chunk-FSYN2HHU.js";
import "./chunk-CUMZN5BS.js";
import "./chunk-3CFYBBSV.js";
import {
  e2 as e
} from "./chunk-UJ25GG5E.js";
import "./chunk-MWVR4HFA.js";
import "./chunk-ZS6XBZGY.js";
import "./chunk-FOPBVVXE.js";
import "./chunk-AACFCXAP.js";
import "./chunk-ZT7UIVVR.js";
import "./chunk-3URWFW2B.js";
import "./chunk-YTTBQ62G.js";
import "./chunk-INI6MHIQ.js";
import "./chunk-5NFV6CXP.js";
import "./chunk-QUZZIDFR.js";
import "./chunk-XNUSHDFN.js";
import "./chunk-2R53FNGL.js";
import "./chunk-KA2INOMU.js";
import "./chunk-CUUDF5R2.js";
import "./chunk-XYME6BO6.js";
import "./chunk-N77BULFI.js";
import "./chunk-NEIJCC5O.js";
import "./chunk-UMUW6RKM.js";
import "./chunk-XRTNDGK2.js";
import "./chunk-XLLV5QUO.js";
import "./chunk-4AKMPOG7.js";
import "./chunk-YQ5L6J6K.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-2CJBZZN7.js";
import "./chunk-YAXW2DL6.js";
import "./chunk-ZT3IR6LI.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-ZBYB4REQ.js";
import "./chunk-YYLIW24Q.js";
import "./chunk-B7BH33JH.js";
import "./chunk-UGTAETXR.js";
import "./chunk-5CXTLD23.js";
import {
  C
} from "./chunk-KZ2CHKU3.js";
import "./chunk-NYEIVTKF.js";
import "./chunk-ZJQPHR3K.js";
import "./chunk-XK66VICH.js";
import "./chunk-HLST5KGP.js";
import "./chunk-PDFWMXUS.js";
import "./chunk-5HCEYXY5.js";
import "./chunk-H6YQECN2.js";
import "./chunk-6JCZVSRM.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-TRJUNZSW.js";
import "./chunk-G3UCNZQL.js";
import "./chunk-P4O4YCLI.js";
import "./chunk-FV6ZNHFI.js";
import "./chunk-IBLVGHDR.js";
import "./chunk-MSSQA3XK.js";
import "./chunk-SRNKPAJX.js";
import "./chunk-MOMLPET6.js";
import "./chunk-GYTEHLOC.js";
import "./chunk-SPNGBO6M.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-LPCUYJ2B.js";
import "./chunk-67AKDROO.js";
import "./chunk-JA3AQLAK.js";
import {
  m
} from "./chunk-GWXO4XME.js";
import "./chunk-S62CSPIH.js";
import "./chunk-X26VPODZ.js";
import "./chunk-XNYPRDKK.js";
import "./chunk-YWPUEUEP.js";
import "./chunk-Y4BWIIWH.js";
import "./chunk-3QHX4R4B.js";
import "./chunk-TTJIKWMC.js";
import "./chunk-CMEG2CKL.js";
import "./chunk-VHPBXBDE.js";
import "./chunk-6ACTD4UJ.js";
import "./chunk-5REYU5G2.js";
import "./chunk-SH3CUEMB.js";
import "./chunk-BMQ3IPHR.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-N626Y23H.js";
import {
  a,
  i3 as i,
  s2 as s
} from "./chunk-TJPLHZCD.js";
import "./chunk-KLFJ5V5G.js";
import "./chunk-EP7EDY5M.js";

// node_modules/@arcgis/core/arcade.js
var y = null;
function f(e2, t2, a2, n = {}) {
  const o = t2.elementType, c = "value", s2 = "array" === o.type ? [{ name: c, type: o.type, elementType: o.elementType }] : "dictionary" === o.type ? [{ name: c, type: o.type, properties: o.properties }] : [{ name: c, type: o.type }];
  return new t(e2.map(((e3) => {
    const t3 = {};
    return g2(t3, s2, { [c]: e3 }, a2, n), t3[c];
  })));
}
function d2(e2, t2, r2 = {}) {
  const a2 = e2 instanceof g ? new Xe({ source: e2.features, geometryType: e2.geometryType, fields: e2.fields, spatialReference: e2.spatialReference }) : e2;
  return t2.constructFeatureSet(a2, r2.spatialReference, null, true, r2.lruCache, r2.interceptor);
}
function b(e2, t2, r2 = {}) {
  const { spatialReference: a2, interceptor: n, lruCache: o } = r2;
  return "string" == typeof e2 ? t2.createFeatureSetCollectionFromService(e2, a2, o, n) : t2.createFeatureSetCollectionFromMap(e2, a2, o, n);
}
function v(e2, t2, r2, a2 = {}) {
  const n = /* @__PURE__ */ Object.create(null);
  return g2(n, t2.properties, e2, r2, a2), new y.Dictionary(n);
}
function g2(e2, r2, a2, n, o = {}) {
  const c = {};
  for (const t2 of Object.keys(a2)) c[t2.toLowerCase()] = a2[t2];
  for (const p of r2) {
    const r3 = p.name.toLowerCase();
    if (o.variablesPreProcessed) e2[r3] = c[r3];
    else switch (p.type) {
      case "array": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : f(t2, p, n, o);
        break;
      }
      case "feature": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : y.Feature.createFromGraphic(t2, o?.timeZone);
        break;
      }
      case "featureSet": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? d2(t2, n, o) : null;
        break;
      }
      case "featureSetCollection": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? b(t2, n, o) : null;
        break;
      }
      case "dictionary": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : v(t2, p, n, o);
        break;
      }
      case "date": {
        const a3 = c[r3];
        e2[r3] = a3 ? a3 instanceof h ? a3 : o?.timeZone ? h.dateJSAndZoneToArcadeDate(a3, o?.timeZone) : h.dateJSToArcadeDate(a3) : null;
        break;
      }
      case "dateOnly": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof i2 ? t2 : i2.fromReader(t2) : null;
        break;
      }
      case "time": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof r ? t2 : r.fromReader(t2) : null;
        break;
      }
      case "knowledgeGraph":
      case "geometry":
      case "boolean":
      case "text":
      case "number":
        e2[r3] = c[r3];
        break;
      case "voxel": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : new y.Voxel(t2, o?.timeZone);
        break;
      }
    }
  }
}
function w(e2, t2) {
  for (const r2 of e2) t2.push(r2), "dictionary" === r2.type && w(r2.properties, t2);
  return t2;
}
function S(e2, t2, r2, a2, n) {
  const { spatialReference: o, interceptor: c, lruCache: s2, console: i3, abortSignal: p, timeZone: l, services: m2 = { portal: C.getDefault() } } = r2, y2 = { vars: {}, spatialReference: o, interceptor: c, timeZone: l, lrucache: s2, useAsync: n, services: m2, console: i3, abortSignal: p };
  return t2 ? (g2(y2.vars, e2.variables, t2, a2, r2), y2) : y2;
}
function h2(t2, r2) {
  switch (r2.getArcadeType(t2)) {
    case "number":
    case "text":
    case "boolean":
    case "point":
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
      return t2;
    case "date":
      return t2.toJSDate();
    case "time":
    case "dateOnly":
      return t2.toString();
    case "feature": {
      const r3 = (t2.type, t2), a2 = "geometry" in r3 ? r3.geometry() : null, n = "readAttributes" in r3 ? r3.readAttributes() : r3.attributes;
      return new d({ geometry: a2, attributes: n });
    }
    case "dictionary": {
      const e2 = t2, a2 = e2.attributes, n = {};
      for (const t3 of Object.keys(a2)) n[t3] = h2(e2.field(t3), r2);
      return n;
    }
    case "array":
      return ("toArray" in t2 ? t2.toArray() : t2).map(((e2) => h2(e2, r2)));
  }
  return t2;
}
var $ = { variables: [{ name: "$feature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$userInput", type: "geometry" }, { name: "$graph", type: "knowledgeGraph" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var x = { variables: [{ name: "$feature", type: "feature" }, { name: "$aggregatedFeatures", type: "featureSet" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var C2 = { variables: [{ name: "$voxel", type: "voxel" }] };
var j = /* @__PURE__ */ new Map([["aggregate-field", { variables: [{ name: "$feature", type: "feature" }] }], ["form-constraint", { variables: [{ name: "$feature", type: "feature" }] }], ["feature-z", { variables: [{ name: "$feature", type: "feature" }] }], ["field-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$datastore", type: "featureSetCollection" }] }], ["form-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$originalFeature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$featureSet", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$editContext", type: "dictionary", properties: [{ name: "editType", type: "text" }] }] }], ["labeling", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup", $], ["popup-element", $], ["popup-feature-reduction", x], ["popup-element-feature-reduction", x], ["visualization", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup-voxel", C2], ["popup-element-voxel", C2]]);
function A(e2) {
  "feature-reduction-popup" === e2 ? (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup"', { replacement: '"popup-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-feature-reduction") : "feature-reduction-popup-element" === e2 && (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup-element"', { replacement: '"popup-element-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-element-feature-reduction");
  const t2 = j.get(e2);
  if (!t2) {
    const t3 = Array.from(j.keys()).map(((e3) => `'${e3}'`)).join(", ");
    throw new s("createArcadeProfile:invalid-profile-name", `Invalid profile name '${e2}'. You must specify one of the following values: ${t3}`);
  }
  return a(t2);
}
async function k(e2, t2, r2 = {}) {
  y || (y = await e());
  const { arcade: a2, arcadeUtils: o, batchExec: { createBatchExecutor: c }, aiServices: { BatchTranslationServiceFactory: s2, PortalTranslationService: i3 } } = y, { loadScriptDependencies: p, referencesMember: l, scriptIsAsync: f2 } = a2, d3 = w(t2.variables, []), b2 = d3.filter(((e3) => "featureSet" === e3.type || "featureSetCollection" === e3.type)).map(((e3) => e3.name.toLowerCase())), v2 = a2.parseScript(e2, b2);
  if (!v2) throw new s("arcade:invalid-script", "Unable to create SyntaxTree");
  const g3 = o.extractFieldNames(v2), $2 = a2.scriptTouchesGeometry(v2), x2 = d3.map(((e3) => e3.name.toLowerCase())).filter(((e3) => l(v2, e3))), C3 = f2(v2, b2);
  await p(v2, C3, b2);
  const j2 = { vars: {}, useAsync: C3 };
  for (const n of x2) j2.vars[n] = "any";
  const { lruCache: A2, services: k2 } = r2, T = a2.compileScript(v2, j2), F = a2.featureSetUtils(), I = (e3, r3 = {}) => {
    if (C3) throw new s("arcade:invalid-execution-mode", "Cannot execute the script in synchronous mode");
    const a3 = { ...k2, ...r3.services }, c2 = { lruCache: A2, ...r3, services: a3 }, s3 = T(S(t2, e3, c2, F, C3));
    return r3.rawOutput ? s3 : h2(s3, o);
  }, O = async (e3, r3 = {}) => {
    const a3 = { ...k2, ...r3.services }, n = { lruCache: A2, ...r3, services: a3 }, c2 = await T(S(t2, e3, n, F, C3));
    return r3.rawOutput ? c2 : h2(c2, o);
  }, D = async (e3, r3, a3 = {}) => {
    const n = [], p2 = c(e3, (async (e4, c2) => {
      const s3 = r3(e4);
      try {
        const e5 = { ...l2, translation: m2.create(c2) }, r4 = { lruCache: A2, ...a3, services: e5 }, i4 = await T(S(t2, s3, r4, F, C3)), p3 = a3.rawOutput ? i4 : h2(i4, o);
        n.push({ id: c2.id, result: { status: "fulfilled", value: p3 } });
      } catch (i4) {
        throw n.push({ id: c2.id, result: { status: "rejected", reason: i4 } }), i4;
      }
    }), a3.maxConcurrency ?? 64, a3.abortSignal), l2 = { ...k2, ...a3.services }, m2 = new s2(p2, l2.translation ?? new i3(l2.portal ?? C.getDefault(), a3.console));
    return await p2.run(), n.sort((({ id: e4 }, { id: t3 }) => e4 - t3)).map((({ result: e4 }) => e4));
  };
  return { execute: I, executeAsync: O, executeAsyncBatch: D, isAsync: C3, variablesUsed: x2, fieldsUsed: g3, geometryUsed: $2, syntaxTree: v2 };
}
export {
  k as createArcadeExecutor,
  A as createArcadeProfile
};
//# sourceMappingURL=arcade-W6BXIPRQ.js.map
